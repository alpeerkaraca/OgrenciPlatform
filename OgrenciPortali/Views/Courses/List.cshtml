@model IEnumerable<Shared.DTO.ListCoursesDTO>
@{
    ViewBag.Title = "Genel Dersler";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>@ViewBag.Title</h2>
        <p>
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addCourseModal">
                <i class="bi bi-plus-square me-2"></i>Yeni Ders Tanımla
            </button>
        </p>
    </div>

    <div class="card shadow-sm">
        <div class="card-body">
            <table id="coursesTable" class="table table-striped table-bordered" style="width: 100%">
                <thead class="thead-dark">
                @Html.AntiForgeryToken()
                <tr>
                    <th>Bölüm</th>
                    <th>Ders Kodu</th>
                    <th>Ders Adı</th>
                    <th>Kredi</th>
                    <th>İşlemler</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => item.DepartmentName)</td>
                        <td>@Html.DisplayFor(modelItem => item.CourseCode)</td>
                        <td>@Html.DisplayFor(modelItem => item.CourseName)</td>
                        <td>@Html.DisplayFor(modelItem => item.Credits)</td>
                        <td class="text-center">
                            @Html.ActionLink("Düzenle", "Edit", new { id = item.CourseId }, new { @class = "btn btn-sm btn-info" })
                            <button type="button" class="btn btn-outline-danger btn-sm delete-course"
                                    data-course-id="@item.CourseId" data-course-name="@item.CourseName">
                                <i class="bi bi-trash"></i> Sil
                            </button>
                        </td>

                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true" style="z-index: 2000">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteConfirmModalLabel">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>Ders Silme Onayı
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="mb-3">Bu dersi silmek istediğinize emin misiniz?</p>
                <div class="alert alert-warning">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    <strong>Uyarı:</strong> Bu işlem geri alınamaz!
                </div>
                <p class="mb-0">
                    <strong>Ders Adı:</strong> <span id="courseNameToDelete"></span>
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">
                    <i class="bi bi-trash me-2"></i>Sil
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Add Course Modal -->
<div class="modal fade" id="addCourseModal" tabindex="-1" aria-labelledby="addCourseModalLabel" aria-hidden="true" style="z-index: 2000">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title text-white" id="addCourseModalLabel">
                    <i class="bi bi-plus-square me-2"></i>Yeni Ders Ekle
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addCourseForm" class="needs-validation" novalidate>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="courseCode" class="form-label">
                                <i class="bi bi-journal me-1"></i>Ders Kodu
                            </label>
                            <input type="text" class="form-control" id="courseCode" name="CourseCode" maxlength="10" required>
                            <div class="invalid-feedback" id="courseCodeError"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="courseName" class="form-label">
                                <i class="bi bi-book me-1"></i>Ders Adı
                            </label>
                            <input type="text" class="form-control" id="courseName" name="CourseName" maxlength="100" required>
                            <div class="invalid-feedback" id="courseNameError"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="credits" class="form-label">
                                <i class="bi bi-123 me-1"></i>Kredi
                            </label>
                            <input type="number" class="form-control" id="credits" name="Credits" min="1" max="10" required>
                            <div class="invalid-feedback" id="creditsError"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="departmentId" class="form-label">
                                <i class="bi bi-building me-1"></i>Bölüm
                            </label>
                            <select class="form-select" id="departmentId" name="DepartmentId" required>
                                <option value="">Bölüm Seçiniz</option>
                            </select>
                            <div class="invalid-feedback" id="departmentIdError"></div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-primary" id="saveCourseBtn">
                    <i class="bi bi-check-lg me-2"></i>Ders Ekle
                </button>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script>
        $(document).ready(function() {
            $('#coursesTable').DataTable({
                language: {
                    url: '/Content/datatables/i18n/tr.json'
                },
                //responsive: {
                //    details: {
                //        type: 'inline',
                //        renderer: DataTable.Responsive.renderer.tableAll({ tableClass: 'table table-sm' })
                //    }
                //},
                columnDefs: [
                    { className: 'dtr-control', orderable: false, targets: 0 },
                    { orderable: false, targets: 4 }
                ],
                order: [[1, 'asc']]
            });

            const urlParams = new URLSearchParams(window.location.search);
            const fromAdd = urlParams.get('add') === 'true';
            const referrer = document.referrer;

            if (fromAdd || referrer.includes('/Courses/Add') || window.location.pathname.includes('/Add')) {
                setTimeout(function() {
                        const addModal = new bootstrap.Modal(document.getElementById('addCourseModal'));
                        addModal.show();
                    },
                    500);
            }
        });
    </script>

    <script>
        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

        if (!token) {
            showFeedbackModal('error', 'Yetkisiz Erişim', 'Bu sayfaya erişim yetkiniz bulunmamaktadır. Lütfen giriş yapınız.', 'Giriş Yap', '/Account/Login');
        };

        document.addEventListener("DOMContentLoaded",
            function() {
                initializeDeleteModal();
            });

        function initializeDeleteModal() {
            const deleteModal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
            const deleteButtons = document.querySelectorAll('.delete-course');
            const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
            const courseNameSpan = document.getElementById('courseNameToDelete');
            let courseIdToDelete = null;

            deleteButtons.forEach(button => {
                button.addEventListener('click',
                    function() {
                        courseIdToDelete = this.dataset.courseId;
                        const courseName = this.dataset.courseName;
                        courseNameSpan.textContent = courseName;
                        deleteModal.show();
                    });
            });

            confirmDeleteBtn.addEventListener('click',
                function() {
                    if (courseIdToDelete) {
                        const apiUrl = encodeURIComponent(`api/courses/delete/${courseIdToDelete}`);
                        fetch(`/ApiProxy/Post?apiUrl=${apiUrl}`,
                                {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                        'RequestVerificationToken': token
                                    }
                                }
                            )
                            .then(resp => {
                                if (resp.ok) {
                                    deleteModal.hide();
                                    location.reload();
                                } else {
                                    console.error('Kullanıcı silinirken hata oluştu.');
                                }
                            });
                    }
                });
        }

// Add Course Modal Functionality
        initializeAddCourseModal();

        function initializeAddCourseModal() {
            const addCourseModal = new bootstrap.Modal(document.getElementById('addCourseModal'));
            const addCourseForm = document.getElementById('addCourseForm');
            const saveCourseBtn = document.getElementById('saveCourseBtn');
            const departmentSelect = document.getElementById('departmentId');

            document.getElementById('addCourseModal').addEventListener('show.bs.modal',
                async function() {
                    try {
                        const apiUrl = encodeURIComponent("api/courses/add");
                        const response = await fetch(`/ApiProxy/Get?apiUrl=${apiUrl}`,
                            {
                                method: 'GET',
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            });

                        if (response.ok) {
                            const data = await response.json();
                            departmentSelect.innerHTML = '<option value="">Bölüm Seçiniz</option>';

                            if (data.DepartmentsList && data.DepartmentsList.length > 0) {
                                data.DepartmentsList.forEach(dept => {
                                    const option = document.createElement('option');
                                    option.value = dept.DepartmentId;
                                    option.textContent = dept.DepartmentName;
                                    departmentSelect.appendChild(option);
                                });
                            }
                        }
                    } catch (error) {
                        showFeedbackModal("error", "Hata Oluştu", error, null, null, null);
                    }
                });

            // Form validation
            function validateForm() {
                let isValid = true;
                const formData = new FormData(addCourseForm);

                // Clear previous errors
                document.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));

                // Course Code validation
                const courseCode = formData.get('CourseCode').trim();
                if (!courseCode) {
                    showFieldError('courseCode', 'courseCodeError', 'Ders kodu gereklidir');
                    isValid = false;
                } else if (courseCode.length > 10) {
                    showFieldError('courseCode', 'courseCodeError', 'Ders kodu en fazla 10 karakter olabilir');
                    isValid = false;
                }

                // Course Name validation
                const courseName = formData.get('CourseName').trim();
                if (!courseName) {
                    showFieldError('courseName', 'courseNameError', 'Ders adı gereklidir');
                    isValid = false;
                } else if (courseName.length > 100) {
                    showFieldError('courseName', 'courseNameError', 'Ders adı en fazla 100 karakter olabilir');
                    isValid = false;
                }

                // Credits validation
                const credits = parseInt(formData.get('Credits'));
                if (!credits || credits < 1 || credits > 10) {
                    showFieldError('credits', 'creditsError', 'Kredi 1 ile 10 arasında olmalıdır');
                    isValid = false;
                }

                // Department validation
                if (!formData.get('DepartmentId')) {
                    showFieldError('departmentId', 'departmentIdError', 'Bölüm seçimi gereklidir');
                    isValid = false;
                }

                // Enable/disable save button based on validation
                saveCourseBtn.disabled = !isValid;
                if (!isValid) {
                    saveCourseBtn.classList.add('button-disabled');
                } else {
                    saveCourseBtn.classList.remove('button-disabled');
                }

                return isValid;
            }

            function showFieldError(fieldId, errorId, message) {
                document.getElementById(fieldId).classList.add('is-invalid');
                document.getElementById(errorId).textContent = message;
            }

            // Add real-time validation
            const courseCodeInput = document.getElementById('courseCode');
            const courseNameInput = document.getElementById('courseName');
            const creditsInput = document.getElementById('credits');
            [courseCodeInput, courseNameInput, creditsInput, departmentSelect].forEach(input => {
                input.addEventListener('input', validateForm);
                input.addEventListener('change', validateForm);
            });

            // Initial validation
            validateForm();

            // Save course
            saveCourseBtn.addEventListener('click',
                async function() {
                    if (!validateForm()) return;

                    const originalText = saveCourseBtn.innerHTML;
                    saveCourseBtn.disabled = true;
                    saveCourseBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Kaydediliyor...';

                    try {
                        const formData = new FormData(addCourseForm);
                        const courseData = {
                            CourseCode: formData.get('CourseCode').trim(),
                            CourseName: formData.get('CourseName').trim(),
                            Credits: parseInt(formData.get('Credits')),
                            DepartmentId: formData.get('DepartmentId')
                        };
                        const apiUrl = encodeURIComponent('api/courses/add');
                        const response = await fetch(`/ApiProxy/Post?apiUrl=${apiUrl}`,
                            {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'RequestVerificationToken': token

                                },

                                body: JSON.stringify(courseData)
                            });

                        const result = await response.json();

                        if (result.success) {
                            addCourseModal.hide();
                            addCourseForm.reset();
                            showFeedbackModal('success',
                                'İşlem Başarılı',
                                result.message || 'Ders başarıyla eklendi.',
                                null,
                                null,
                                function() {
                                    location.reload();
                                });
                        } else {
                            showFeedbackModal('error', 'İşlem Başarısız', result.message || 'Bir hata oluştu.');
                        }
                    } catch (error) {
                        console.error('Ders eklenirken hata:', error);
                        showFeedbackModal('error', 'Bağlantı Hatası', 'Sunucuya bağlanırken bir hata oluştu.');
                    } finally {
                        saveCourseBtn.disabled = false;
                        saveCourseBtn.innerHTML = originalText;
                    }
                });

            // Reset form when modal is hidden
            document.getElementById('addCourseModal').addEventListener('hidden.bs.modal',
                function() {
                    addCourseForm.reset();
                    document.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
                    document.querySelectorAll('.invalid-feedback').forEach(el => el.textContent = '');
                });
        }
    </script>
}