@using System.Security.Claims
@using Shared.DTO
@using Shared.Enums
@using Roles = Shared.Enums.Roles
@model MyCoursesDTO
@{
    ViewBag.Title = "Ana Sayfa";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" href="../../Content/css/index-style.css" />


<div class="hero-section">
    @Html.AntiForgeryToken()
    <div class="welcome-time" id="currentTime"></div>
    @if (User.Identity.IsAuthenticated)
    {
        var claimsIdentity = User.Identity as ClaimsIdentity;
        var department = claimsIdentity?.FindFirst("department")?.Value;
        var studentNo = claimsIdentity?.FindFirst("student_no")?.Value;
        var userRole = claimsIdentity?.FindFirst(claimsIdentity.RoleClaimType)?.Value;
        var userFullName = claimsIdentity?.FindFirst("full_name").Value;

        <h1 class="display-4 mb-3">
            Hoş Geldiniz, <br>@userFullName
        </h1>
        <p class="lead mb-4">
            @switch (userRole)
            {
                case nameof(Roles.Admin):
                    @:Sistem yöneticisi olarak platformun tüm özelliklerini yönetebilirsiniz.
                    break;
                case nameof(Roles.Danışman):
                    @:Danışman olarak öğrencilerinizin akademik yolculuklarına rehberlik edebilirsiniz.
                    break;
                default:
                    {
                        if (userRole == nameof(Roles.Danışman))
                        {
                            @:Öğrenci portalına hoş geldiniz. Ders seçimi yapabilir ve akademik bilgilerinizi takip edebilirsiniz.
                        }

                        break;
                    }
            }
        </p>

        <div class="d-flex flex-wrap justify-content-center gap-2 ">
            @if (!string.IsNullOrEmpty(department))
            {
                <span class="user-info-badge">
                    <i class="bi bi-building me-2"></i>@department
                </span>
            }
            @if ((userRole == nameof(Roles.Öğrenci) || User.IsInRole("Öğrenci")) && !string.IsNullOrEmpty(studentNo))
            {
                <span class="user-info-badge">
                    <i class="bi bi-card-text me-2"></i>@studentNo
                </span>
            }
            <span class="user-info-badge">
                <i class="bi bi-person-badge me-2"></i>
                @if (userRole == nameof(Roles.Admin))
                {
                    <text>Admin</text>
                }
                else if (userRole == nameof(Roles.Danışman))
                {
                    <text>Danışman</text>
                }
                else if (userRole == nameof(Roles.Öğrenci))
                {
                    <text>Öğrenci</text>
                }
                else
                {
                    @userRole
                }
            </span>
        </div>
    }
    else
    {
        <p class="lead mb-4">Öğrenci Yönetim Sistemine hoş geldiniz. Lütfen giriş yapın.</p>
        <a href="@Url.Action("Login", "User")" class="btn btn-light btn-lg">
            <i class="bi bi-box-arrow-in-right me-2"></i>Giriş Yap
        </a>
    }
</div>

@if (User.Identity.IsAuthenticated)


{
    var claims = User.Identity as ClaimsIdentity;
    var userRole = claims?.FindFirst(claims.RoleClaimType)?.Value;

    if (User.IsInRole(nameof(Roles.Öğrenci)))
    {
        <div class="row mb-3">
            <div class="col-12 text-center">
                <h2 class="section-title">Ders Programı</h2>
                <p class="section-subtitle">Haftalık ders programınız.</p>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                @{
                    var studentScheduleData = Model;
                }

                @if (studentScheduleData != null && studentScheduleData.Courses.Any(c => c.ApprovalStatus == (int)ApprovalStatus.Onaylandı))
                {
                    @Html.Partial("_StudentSchedule", studentScheduleData)
                }
                else
                {
                    <div class="alert alert-info text-center">
                        <i class="bi bi-info-circle me-2"></i>Görüntülenecek onaylanmış dersiniz bulunmamaktadır.
                    </div>
                }
            </div>
        </div>
    }
    <div class="row mb-5">
        <div class="col-12 text-center">
            <h2 class="section-title">Sistem Durumu</h2>
            <p class="section-subtitle">Anlık veriler ve istatistikler</p>
        </div>
    </div>

    <div class="row g-4 mb-5">
        @if (userRole == nameof(Roles.Admin))
        {
            <div class="col-lg-3 col-md-6">
                <div class="card metric-card fade-in-up animation-delay-1">
                    <div class="metric-icon" style="background: linear-gradient(135deg, #3498db, #2980b9);">
                        <i class="bi bi-people-fill"></i>
                    </div>
                    <div class="metric-number" id="userCount">
                        <div class="spinner-grow" style="color: #3498db"></div>
                    </div>
                    <div class="metric-label">Toplam Kullanıcı</div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="card metric-card fade-in-up animation-delay-2">
                    <div class="metric-icon" style="background: linear-gradient(135deg, #27ae60, #229954);">
                        <i class="bi bi-book-fill"></i>
                    </div>
                    <div class="metric-number" id="courseCount">
                        <div class="spinner-grow" style="color: #27ae60"></div>
                    </div>
                    <div class="metric-label">Toplam Ders</div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="card metric-card fade-in-up animation-delay-3">
                    <div class="metric-icon" style="background: linear-gradient(135deg, #f39c12, #e67e22);">
                        <i class="bi bi-clock-fill"></i>
                    </div>
                    <div class="metric-number" id="pendingCount">
                        <div class="spinner-grow" style="color: #f39c12"></div>
                    </div>
                    <div class="metric-label">Bekleyen Onaylar</div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="card metric-card fade-in-up animation-delay-4">
                    <div class="metric-icon" style="background: linear-gradient(135deg, #9b59b6, #8e44ad);">
                        <i class="bi bi-building-fill"></i>
                    </div>
                    <div class="metric-number" id="departmentCount">
                        <div class="spinner-grow" style="color: #9b59b6"></div>
                    </div>
                    <div class="metric-label">Toplam Bölüm</div>
                </div>
            </div>
        }
        else if (User.IsInRole(nameof(Roles.Danışman)))
        {
            <div class="col-lg-4 col-md-6">
                <div class="card metric-card fade-in-up animation-delay-1">
                    <div class="metric-icon" style="background: linear-gradient(135deg, #3498db, #2980b9);">
                        <i class="bi bi-people-fill"></i>
                    </div>
                    <div class="metric-number" id="advisedStudentCount">
                        <div class="spinner-grow" style="color: #3498db"></div>
                    </div>
                    <div class="metric-label">Danışan Öğrenciler</div>
                </div>
            </div>
            <div class="col-lg-4 col-md-6">
                <div class="card metric-card fade-in-up animation-delay-2">
                    <div class="metric-icon" style="background: linear-gradient(135deg, #f39c12, #e67e22);">
                        <i class="bi bi-clock-fill"></i>
                    </div>
                    <div class="metric-number" id="pendingApprovalCount">
                        <div class="spinner-" style="color: #f39c12"></div>
                    </div>
                    <div class="metric-label">Bekleyen Onaylar</div>
                </div>
            </div>
            <div class="col-lg-4 col-md-6">
                <div class="card metric-card fade-in-up animation-delay-3">
                    <div class="metric-icon" style="background: linear-gradient(135deg, #27ae60, #229954);">
                        <i class="bi bi-check-circle-fill"></i>
                    </div>
                    <div class="metric-number" id="approvedCount">
                        <div class="spinner-grow" style="color: #27ae60"></div>
                    </div>
                    <div class="metric-label">Onaylanan Kayıtlar</div>
                </div>
            </div>
        }
        else if (userRole == nameof(Roles.Öğrenci) || User.IsInRole("Öğrenci"))
        {

            <div class="col-lg-4 col-md-6">
                <div class="card metric-card fade-in-up animation-delay-1">
                    <div class="metric-icon" style="background: linear-gradient(135deg, #3498db, #2980b9);">
                        <i class="bi bi-book-fill"></i>
                    </div>
                    <div class="metric-number" id="enrolledCourseCount">
                        <div class="spinner-grow" style="color: #3498db"></div>
                    </div>
                    <div class="metric-label">Kayıtlı Dersler</div>
                </div>
            </div>
            <div class="col-lg-4 col-md-6">
                <div class="card metric-card fade-in-up animation-delay-2">
                    <div class="metric-icon" style="background: linear-gradient(135deg, #f39c12, #e67e22);">
                        <i class="bi bi-clock-fill"></i>
                    </div>
                    <div class="metric-number" id="pendingCourseCount">
                        <div class="spinner-grow" style="color: #f39c12"></div>
                    </div>
                    <div class="metric-label">Onay Bekleyen</div>
                </div>
            </div>
            <div class="col-lg-4 col-md-6">
                <div class="card metric-card fade-in-up animation-delay-3">
                    <div class="metric-icon" style="background: linear-gradient(135deg, #27ae60, #229954);">
                        <i class="bi bi-check-circle-fill"></i>
                    </div>
                    <div class="metric-number" id="approvedCourseCount">
                        <div class="spinner-grow" style="color: #27ae60"></div>
                    </div>
                    <div class="metric-label">Onaylanan Dersler</div>
                </div>
            </div>
        }
    </div>

    <div class="row mb-5">
        <div class="col-12 text-center">
            <h2 class="section-title">Hızlı Erişim</h2>
            <p class="section-subtitle">Sık kullanılan işlemler için kısayollar</p>
        </div>
    </div>

    <div class="row g-4">
        @if (userRole == nameof(Roles.Admin) || User.IsInRole("Admin"))
        {
            <div class="col-lg-4 col-md-6">
                <a href="@Url.Action("Register", "User")" class="quick-action fade-in-up animation-delay-1">
                    <div class="action-icon">
                        <i class="bi bi-person-plus"></i>
                    </div>
                    <div class="action-title">Yeni Kullanıcı</div>
                    <div class="action-description">Sisteme yeni kullanıcı ekleyin</div>
                </a>
            </div>
            <div class="col-lg-4 col-md-6">
                <a href="@Url.Action("List", "Courses", new { add = "true" })" class="quick-action fade-in-up animation-delay-2">
                    <div class="action-icon">
                        <i class="bi bi-plus-circle"></i>
                    </div>
                    <div class="action-title">Yeni Ders</div>
                    <div class="action-description">Sisteme yeni ders tanımlayın</div>
                </a>
            </div>
            <div class="col-lg-4 col-md-6">
                <a href="@Url.Action("List", "User")" class="quick-action fade-in-up animation-delay-3">
                    <div class="action-icon">
                        <i class="bi bi-people"></i>
                    </div>
                    <div class="action-title">Kullanıcı Yönetimi</div>
                    <div class="action-description">Tüm kullanıcıları görüntüleyin</div>
                </a>
            </div>
        }
        else if (userRole == nameof(Roles.Danışman) || User.IsInRole("Danışman"))
        {
            <div class="col-lg-6 col-md-6">
                <a href="@Url.Action("CourseApprovals", "Advisor")" class="quick-action fade-in-up animation-delay-1">
                    <div class="action-icon">
                        <i class="bi bi-check-circle"></i>
                    </div>
                    <div class="action-title">Ders Onayları</div>
                    <div class="action-description">Öğrenci ders kayıtlarını onaylayın</div>
                </a>
            </div>
            <div class="col-lg-6 col-md-6">
                <a href="@Url.Action("AdvisedStudentList", "Advisor")" class="quick-action fade-in-up animation-delay-2">
                    <div class="action-icon">
                        <i class="bi bi-people"></i>
                    </div>
                    <div class="action-title">Danışan Öğrenciler</div>
                    <div class="action-description">Öğrencilerinizi görüntüleyin</div>
                </a>
            </div>
        }
        else if (userRole == nameof(Roles.Öğrenci) || User.IsInRole("Öğrenci"))
        {
            <div class="col-lg-6 col-md-6">
                <a href="@Url.Action("Enroll", "Student")" class="quick-action fade-in-up animation-delay-1">
                    <div class="action-icon">
                        <i class="bi bi-plus-circle"></i>
                    </div>
                    <div class="action-title">Ders Seçimi</div>
                    <div class="action-description">Yeni dersler seçin</div>
                </a>
            </div>
            <div class="col-lg-6 col-md-6">
                <a href="@Url.Action("MyCourses", "Student")" class="quick-action fade-in-up animation-delay-2">
                    <div class="action-icon">
                        <i class="bi bi-book"></i>
                    </div>
                    <div class="action-title">Derslerim</div>
                    <div class="action-description">Kayıtlı derslerinizi görün</div>
                </a>
            </div>

        }
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/schedule")
    <script>
        class DashboardManager {
            constructor() {
                this.refreshInterval = 60000;
                this.animationDuration = 1000;
                this.csrfToken = document.querySelector('input[name="__RequestVerificationToken"]').value;
                this.init();
            }

            init() {
                this.updateTime();
                this.loadDashboardData(); // İlk veri yüklemesi
                this.startAutoRefresh();
                setInterval(() => this.updateTime(), 1000);
            }

            updateTime() {
                const now = new Date();
                const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' };
                const timeString = now.toLocaleDateString('tr-TR', options);
                document.getElementById('currentTime').textContent = timeString;
            }

            async loadDashboardData() {
                try {
                    const apiUrl = encodeURIComponent('api/dashboard/data');
                    const response = await fetch(`/ApiProxy/Get?apiUrl=${apiUrl}`,
                        {
                            method: 'GET',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        });

                    if (!response.ok) {
                        if (response.status === 401) {
                            showFeedbackModal("error", "Oturum Süresi Doldu", "Oturumunuzun süresi doldu, lütfen tekrar giriş yapın.", null, () => window.location.href = '/User/Login', "Giriş Yap");
                        }
                        throw new Error(`Sunucu Hatası: ${response.status}`);
                    }

                    const result = await response.json();

                    this.updateCounters(result);

                } catch (error) {
                    console.error('FetchAPI Hatası:', error);
                }
            }

            updateCounters(data) {
                Object.keys(data).forEach((key, index) => {
                    const element = document.getElementById(key);
                    if (element) {
                        setTimeout(() => {
                                this.animateCounter(element, data[key]);
                            },
                            index * 200);
                    }
                });
            }

            animateCounter(element, targetValue, duration = this.animationDuration) {
                const startValue = parseInt(element.textContent) || 0;
                let startTime = null;
                const animate = (currentTime) => {
                    if (startTime === null) startTime = currentTime;
                    const progress = Math.min((currentTime - startTime) / duration, 1);
                    const currentValue = Math.floor(startValue + (targetValue - startValue) * progress);
                    element.textContent = currentValue;
                    if (progress < 1) {
                        requestAnimationFrame(animate);
                    }
                };
                requestAnimationFrame(animate);
            }

            startAutoRefresh() {
                setInterval(() => {
                        this.loadDashboardData();
                    },
                    this.refreshInterval);
            }
        }

        document.addEventListener('DOMContentLoaded',
            function() {
                @if (User.Identity.IsAuthenticated)
                {
                    <text>new DashboardManager();</text>
                }
            });
    </script>
}