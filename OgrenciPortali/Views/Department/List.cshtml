@model OgrenciPortali.ViewModels.DepartmentListViewModel

@{
    ViewBag.Title = "Bölüm Listesi";
}

<body>
<div class="d-flex justify-content-center align-self-center">
    <div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModal" style="z-index: 2000">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteConfirmModalLabel">Emin misiniz?</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Bu bölümü silmek istediğinize emin misiniz? Bu işlem geri alınamaz!</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Sil</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>@ViewBag.Title</h2>
        <p>
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addDepartmentModal">
                <i class="bi bi-plus-square me-2"></i>Yeni Bölüm Tanımla
            </button>
        </p>
    </div>

    <div class="card shadow-sm">
        <div class="card-body">
            <table id="coursesTable" class="table table-striped table-bordered" style="width: 100%">
                <thead class="thead-dark">
                <tr>
                    <th class="text-center">Bölüm Kodu</th>
                    <th class="text-center">Bölüm Adı</th>
                    <th class="text-center">İşlemler</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var item in Model.Departments)
                {
                    <tr>
                        <td class="text-center">@Html.DisplayFor(modelItem => item.DepartmentCode)</td>
                        <td class="text-center">@Html.DisplayFor(modelItem => item.DepartmentName)</td>
                        <td class="text-center align-items-center">
                            @Html.ActionLink("Düzenle", "Edit", "Department", new { id = item.DepartmentId }, new { @class = "btn btn-sm btn-info" })
                            <button type="button" class="btn btn-outline-danger btn-sm delete-course"
                                    data-department-id="@item.DepartmentId" data-department-name="@item.DepartmentName">
                                <i class="bi bi-trash"></i> Sil
                            </button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true" style="z-index: 2000">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteConfirmModalLabel">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>Bölüm Silme Onayı
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="mb-3">Bu bölümü silmek istediğinize emin misiniz?</p>
                <div class="alert alert-warning">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    <strong>Uyarı:</strong> Bu işlem geri alınamaz!
                </div>
                <p class="mb-0">
                    <strong>Bölüm Adı:</strong> <span id="departmentNameToDelete"></span>
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">
                    <i class="bi bi-trash me-2"></i>Sil
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Add Department Modal -->
<div class="modal fade" id="addDepartmentModal" tabindex="-1" aria-labelledby="addDepartmentModalLabel" aria-hidden="true" style="z-index: 2000">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title text-white" id="addDepartmentModalLabel">
                    <i class="bi bi-plus-square me-2"></i>Yeni Bölüm Ekle
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addDepartmentForm" class="needs-validation" novalidate>
                    <div class="row">
                        <div class="col-12 mb-3">
                            <label for="departmentCode" class="form-label">
                                <i class="bi bi-journal me-1"></i>Bölüm Kodu
                            </label>
                            <input type="text" class="form-control" id="departmentCode" name="DepartmentCode" maxlength="10" required>
                            <div class="invalid-feedback" id="departmentCodeError"></div>
                        </div>
                        <div class="col-12 mb-3">
                            <label for="departmentName" class="form-label">
                                <i class="bi bi-building me-1"></i>Bölüm Adı
                            </label>
                            <input type="text" class="form-control" id="departmentName" name="DepartmentName" maxlength="100" required>
                            <div class="invalid-feedback" id="departmentNameError"></div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-primary" id="saveDepartmentBtn">
                    <i class="bi bi-check-lg me-2"></i>Bölüm Ekle
                </button>
            </div>
        </div>
    </div>
    @Html.AntiForgeryToken()
</div>

@section Scripts {

    <script>
        $(document).ready(function() {
            $('#coursesTable').DataTable({
                language: {
                    url: '/Content/datatables/i18n/tr.json'
                },
                responsive: {
                    details: {
                        type: 'inline',
                        renderer: DataTable.Responsive.renderer.tableAll({ tableClass: 'table table-sm' })
                    }
                },
                columnDefs: [
                    { className: 'dtr-control', orderable: false, targets: 0 },
                    { orderable: false, targets: 2 }
                ],
                order: [[1, 'asc']]
            });

            // Auto-open Add modal if coming from quick action or Add link
            const urlParams = new URLSearchParams(window.location.search);
            const fromAdd = urlParams.get('add') === 'true';
            const referrer = document.referrer;

            if (fromAdd || referrer.includes('/Department/Add') || window.location.pathname.includes('/Add')) {
                setTimeout(function() {
                        const addModal = new bootstrap.Modal(document.getElementById('addDepartmentModal'));
                        addModal.show();
                    },
                    500);
            }
        });
    </script>

    <script>

        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

        if (!token) {
            showFeedbackModal("error", "Yetkisiz İşlem", "Bu işlemi yapmak için yeterli yetkiniz bulunmuyor. Sayfayı tekrar yükleyin ya da giriş yapın.", null, null, null);
            return;
        }

        document.addEventListener("DOMContentLoaded",
            function() {
                initializeDeleteModal();
            });

        function initializeDeleteModal() {
            const deleteModal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
            const deleteButtons = document.querySelectorAll('.delete-course');
            const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
            const courseNameSpan = document.getElementById('departmentNameToDelete');
            let departmentIdToDelete = null;

            deleteButtons.forEach(button => {
                button.addEventListener('click',
                    function() {
                        departmentIdToDelete = this.dataset.departmentId;
                        const courseName = this.dataset.departmentName;
                        courseNameSpan.textContent = courseName;
                        deleteModal.show();
                    });
            });

            confirmDeleteBtn.addEventListener('click',
                function() {
                    if (departmentIdToDelete) {
                        var apiUrl = encodeURIComponent(`api/departments/delete/${departmentIdToDelete}`);
                        fetch(`/ApiProxy/Get?apiUrl=${apiUrl}`,
                                {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                        'RequestVerificationToken': token
                                    }
                                }
                            )
                            .then(resp => {
                                if (resp.ok) {
                                    deleteModal.hide();
                                    location.reload();
                                } else {
                                    console.error('Kullanıcı silinirken hata oluştu.');
                                }
                            });
                    }
                });
        }

        // Add Department Modal Functionality
        initializeAddDepartmentModal();

        function initializeAddDepartmentModal() {
            const addDepartmentModal = new bootstrap.Modal(document.getElementById('addDepartmentModal'));
            const addDepartmentForm = document.getElementById('addDepartmentForm');
            const saveDepartmentBtn = document.getElementById('saveDepartmentBtn');

            // Form validation
            function validateDepartmentForm() {
                let isValid = true;
                const formData = new FormData(addDepartmentForm);

                // Clear previous errors
                document.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));

                // Department Code validation
                const departmentCode = formData.get('DepartmentCode').trim();
                if (!departmentCode) {
                    showDepartmentFieldError('departmentCode', 'departmentCodeError', 'Bölüm kodu gereklidir');
                    isValid = false;
                } else if (departmentCode.length > 10) {
                    showDepartmentFieldError('departmentCode', 'departmentCodeError', 'Bölüm kodu en fazla 10 karakter olabilir');
                    isValid = false;
                }

                // Department Name validation
                const departmentName = formData.get('DepartmentName').trim();
                if (!departmentName) {
                    showDepartmentFieldError('departmentName', 'departmentNameError', 'Bölüm adı gereklidir');
                    isValid = false;
                } else if (departmentName.length > 100) {
                    showDepartmentFieldError('departmentName', 'departmentNameError', 'Bölüm adı en fazla 100 karakter olabilir');
                    isValid = false;
                }

                return isValid;
            }

            function showDepartmentFieldError(fieldId, errorId, message) {
                document.getElementById(fieldId).classList.add('is-invalid');
                document.getElementById(errorId).textContent = message;
            }

            // Save department
            saveDepartmentBtn.addEventListener('click',
                async function() {
                    if (!validateDepartmentForm()) return;

                    const originalText = saveDepartmentBtn.innerHTML;
                    saveDepartmentBtn.disabled = true;
                    saveDepartmentBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Kaydediliyor...';

                    try {
                        const formData = new FormData(addDepartmentForm);
                        const departmentData = {
                            DepartmentCode: formData.get('DepartmentCode').trim(),
                            DepartmentName: formData.get('DepartmentName').trim()
                        };
                        const apiUrl = encodeURIComponent('api/departments/add');
                        const response = await fetch(`/ApiProxy/Get?apiUrl=${apiUrl}`,
                            {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'RequestVerificationToken': token
                                },
                                body: JSON.stringify(departmentData)
                            });

                        const result = await response.json();

                        if (response.ok) {
                            addDepartmentModal.hide();
                            addDepartmentForm.reset();
                            showFeedbackModal('success',
                                'İşlem Başarılı',
                                result.message || 'Bölüm başarıyla eklendi.',
                                null,
                                null,
                                function() {
                                    location.reload();
                                });
                        } else {
                            showFeedbackModal('error', 'İşlem Başarısız', result.message || 'Bir hata oluştu.');
                        }
                    } catch (error) {
                        console.error('Bölüm eklenirken hata:', error);
                        showFeedbackModal('error', 'Bağlantı Hatası', 'Sunucuya bağlanırken bir hata oluştu.');
                    } finally {
                        saveDepartmentBtn.disabled = false;
                        saveDepartmentBtn.innerHTML = originalText;
                    }
                });

            // Reset form when modal is hidden
            document.getElementById('addDepartmentModal').addEventListener('hidden.bs.modal',
                function() {
                    addDepartmentForm.reset();
                    document.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
                    document.querySelectorAll('.invalid-feedback').forEach(el => el.textContent = '');
                });
        }
    </script>
}

</body>