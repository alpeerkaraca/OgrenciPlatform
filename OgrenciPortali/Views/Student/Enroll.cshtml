@using System.Security.Claims
@model OgrenciPortali.ViewModels.EnrollmentPageViewModel
@{
    ViewBag.Title = "Ders Kayıt Ekranı";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    /* Custom styles for the enrollment page */
    .selected-course-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem;
        border-radius: 6px;
        background-color: #f8f9fa;
        margin-bottom: 0.5rem;
        border-left: 4px solid var(--primary-color);
        transition: background-color 0.2s ease;
    }

    .selected-course-item.pending {
        border-left-color: var(--warning-color);
        background-color: #fff8e1;
    }

    .quota-full {
        color: #6c757d;
        background-color: #f1f3f5 !important; /* Override hover styles */
        cursor: not-allowed;
    }

    .btn-add-course, .btn-remove-course {
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
    }

    /* DataTables Custom Styling */

    .dataTables_wrapper .dataTables_filter input {
        border-radius: 20px;
        padding: 0.375rem 0.75rem;
        border: 1px solid #ced4da;
    }

    .dataTables_wrapper .dataTables_paginate .page-link {
        border-radius: 50% !important;
        margin: 0 2px;
    }

    .dataTables_wrapper .dataTables_length select { border-radius: 5px; }
</style>

<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-1 text-gray-800">Ders Seçimi</h1>
            <p class="text-muted mb-0">Bu dönem için derslerinizi seçin ve onaya gönderin.</p>
        </div>
    </div>

    <div class="row g-4">
        <!-- Selected Courses Column -->
        <div class="col-lg-5">
            <div class="card shadow-sm h-100" id="selected-courses-card">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">
                        <i class="bi bi-check-circle-fill me-2"></i>Seçilen Dersler
                    </h5>
                </div>
                <div class="card-body d-flex flex-column">
                    <!-- Credits Info -->
                    <div class="d-flex justify-content-around text-center mb-3">
                        <div>
                            <div class="h4 font-weight-bold mb-0" id="selected-credits">0</div>
                            <div class="text-xs text-muted">SEÇİLEN KREDİ</div>
                        </div>
                        <div>
                            <div class="h4 font-weight-bold mb-0" id="max-credits">30</div>
                            <div class="text-xs text-muted">MAKS. KREDİ</div>
                        </div>
                    </div>
                    <hr/>
                    <!-- Selected Courses List -->
                    <div id="selected-courses-list" class="flex-grow-1" style="overflow-y: auto; max-height: 45vh;">
                        @if (!Model.PendingCourses.Any())
                        {
                            <div class="text-center text-muted mt-3" id="no-selection-message">
                                <i class="bi bi-journal-plus h1"></i>
                                <p>Henüz ders seçmediniz.</p>
                            </div>
                        }
                        <!-- Onay Bekleyen Dersler -->
                        @foreach (var course in Model.PendingCourses)
                        {
                            <div class="selected-course-item pending" data-id="@course.OfferedCourseId" data-credit="@course.Credit">
                                <div>
                                    <div class="fw-bold">@course.CourseCode - @course.CourseName</div>
                                    <small class="text-muted">@course.Credit Kredi</small>
                                </div>
                                <span class="badge bg-warning text-dark">Onay Bekliyor</span>
                            </div>
                        }
                    </div>
                </div>
                <div class="card-footer bg-light text-center">
                    <button type="button" id="submit-selection-btn" class="btn btn-success btn-lg w-100 mb-2">
                        <i class="bi bi-send-check-fill me-2"></i>Onaya Gönder
                    </button>
                    @if (Model.PendingCourses.Any())
                    {
                        <button type="button" id="reset-selection-btn" class="btn btn-outline-danger w-100">
                            <i class="bi bi-trash-fill me-2"></i>Seçimleri Sıfırla
                        </button>
                    }
                </div>
            </div>
        </div>

        <!-- Available Courses Column -->
        <div class="col-lg-7">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-light">
                    <h5 class="mb-0">
                        <i class="bi bi-list-ul me-2"></i>Dönem Dersleri
                    </h5>
                </div>
                <div class="card-body d-flex flex-column">
                    <!-- Available Courses Table -->
                    <table id="available-courses-datatable" class="table table-hover table-sm" style="width: 100%">
                        <thead>
                        <tr>
                            <th>Ders Kodu</th>
                            <th>Ders Adı</th>
                            <th>Kredi</th>
                            <th>Öğr. Üyesi</th>
                            <th>Kontenjan</th>
                            <th class="text-center">İşlem</th>
                        </tr>
                        </thead>
                        <tbody>
                            @foreach (var course in Model.EnrollableList)
                            {
                                bool isQuotaFull = course.CurrentUserCount >= course.Quota;
                                <tr data-id="@course.OfferedCourseId" data-code="@course.CourseCode" data-name="@course.CourseName" data-credit="@course.Credit" data-teacher="@course.TeacherName" class="@(isQuotaFull ? "quota-full" : "")">
                                    <td>@course.CourseCode</td>
                                    <td>@course.CourseName</td>
                                    <td>@course.Credit</td>
                                    <td>@course.TeacherName</td>
                                    <td>@course.CurrentUserCount / @course.Quota</td>
                                    <td class="text-center">
                                        @if (isQuotaFull)
                                        {
                                            <span class="badge bg-danger">Dolu</span>
                                        }
                                        else
                                        {
                                            <button class="btn btn-sm btn-outline-primary btn-add-course">
                                                <i class="bi bi-plus-circle"></i> Ekle
                                            </button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    @Html.AntiForgeryToken()
</div>

<!-- Modals -->
<div class="modal fade" id="resetConfirmModal" tabindex="-1" style="z-index: 2000">...</div>
<div class="modal fade" id="creditLimitModal" tabindex="-1" style="z-index: 2000">...</div>
<div class="modal fade" id="responseModal" tabindex="-1" style="z-index: 2000">...</div>


@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded',
            () => {
                // === DOM Elements ===
                const selectedCoursesList = document.getElementById('selected-courses-list');
                const selectedCreditsEl = document.getElementById('selected-credits');
                const maxCredits = parseInt(document.getElementById('max-credits').textContent, 10);
                const submitBtn = document.getElementById('submit-selection-btn');
                const noSelectionMessage = document.getElementById('no-selection-message');
                let selectedCourses = new Map();

                // === DataTable Initialization ===
                const availableCoursesTable = new DataTable('#available-courses-datatable',
                    {
                        language: {
                            url: '/Content/datatables/i18n/tr.json',
                        },
                        "lengthMenu": [[5, 10, 25, -1], [5, 10, 25, "Tümü"]],
                        "pageLength": 5,
                        responsive: {
                            details: {
                                type: 'inline',
                                renderer: DataTable.Responsive.renderer.tableAll({ tableClass: 'table table-sm' })
                            }
                        },
                        "columnDefs": [
                            { className: 'dtr-control', orderable: false, targets: 0 },
                            { "orderable": false, "targets": 5 }
                        ]
                    });

                const getRowByCourseId = (id) => {
                    let targetRow = null;
                    availableCoursesTable.rows().every(function() {
                        const rowNode = this.node();
                        if (rowNode.dataset.id === id) {
                            targetRow = rowNode;
                        }
                    });
                    return targetRow;
                };

                // === Functions ===
                const updateCreditCount = () => {
                    let currentCredits = 0;
                    selectedCourses.forEach(course => currentCredits += course.credit);
                    document.querySelectorAll('.selected-course-item.pending').forEach(item => {
                        currentCredits += parseInt(item.dataset.credit, 10);
                    });
                    selectedCreditsEl.textContent = currentCredits;
                    if (noSelectionMessage) {
                        noSelectionMessage.style.display = (selectedCourses.size === 0 && !document.querySelector('.selected-course-item.pending')) ? 'block' : 'none';
                    }
                };

                const addCourseToSelection = (courseData) => {
                    if (selectedCourses.has(courseData.id) || document.querySelector(`.selected-course-item.pending[data-id="${courseData.id}"]`)) return;
                    if (parseInt(selectedCreditsEl.textContent, 10) + courseData.credit > maxCredits) {
                        alert('Maksimum kredi limitini aştınız!');
                        return;
                    }
                    selectedCourses.set(courseData.id, courseData);
                    renderSelectedList();
                    updateAvailableList();
                    updateCreditCount();
                };

                const removeCourseFromSelection = (courseId) => {
                    selectedCourses.delete(courseId);
                    renderSelectedList();
                    updateAvailableList();
                    updateCreditCount();
                };

                const renderSelectedList = () => {
                    selectedCoursesList.querySelectorAll('.selected-course-item:not(.pending)').forEach(el => el.remove());
                    selectedCourses.forEach(course => {
                        const courseEl = document.createElement('div');
                        courseEl.className = 'selected-course-item';
                        courseEl.dataset.id = course.id;
                        courseEl.dataset.credit = course.credit;
                        courseEl.innerHTML = `
                            <div>
                                <div class="fw-bold">${course.code} - ${course.name}</div>
                                <small class="text-muted">${course.credit} Kredi</small>
                            </div>
                            <button class="btn btn-sm btn-outline-danger btn-remove-course" data-id="${course.id}"><i class="bi bi-x-circle"></i></button>`;
                        selectedCoursesList.appendChild(courseEl);
                    });
                };

                const updateAvailableList = () => {
                    availableCoursesTable.rows().nodes().each(rowNode => {
                        const row = rowNode;
                        const courseId = row.dataset.id;
                        const addBtn = row.querySelector('.btn-add-course');
                        if (!addBtn) return;
                        if (selectedCourses.has(courseId) || document.querySelector(`.selected-course-item.pending[data-id="${courseId}"]`)) {
                            addBtn.disabled = true;
                            addBtn.innerHTML = '<i class="bi bi-check-lg"></i> Eklendi';
                            addBtn.classList.replace('btn-outline-primary', 'btn-outline-secondary');
                        } else {
                            addBtn.disabled = false;
                            addBtn.innerHTML = '<i class="bi bi-plus-circle"></i> Ekle';
                            addBtn.classList.replace('btn-outline-secondary', 'btn-outline-primary');
                        }
                    });
                };

                async
                submitSelection = (e) => {
                    e.preventDefault();
                    if (selectedCourses.size === 0) {
                        showFeedbackModal("error", "Ders Seçin", "Lütfen en az bir ders seçin.");
                        return;
                    }
                    const csrfToken = document.querySelector('input[name="__RequestVerificationToken"]').value;
                    const apiUrl = encodeURIComponent('api/student/enroll-course');
                    if (!csrfToken) {
                        showFeedbackModal("error",
                            "Yetkisiz İşlem",
                            "Kimliğiniz doğrulanamadı. Lütfen tekrar giriş yapınız.",
                            () => { window.location.href = "/User/Logout" },
                            "Giriş Yap",
                            null
                        );
                        return;
                    }

                    const selectedIds = Array.from(selectedCourses.keys());

                    var res = await fetch(`/ApiProxy/Get?apiUrl=${apiUrl}`,
                        {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': csrfToken
                            },
                            body: JSON.stringify(selectedIds),
                        });
                    var json = await res.json();
                    if (res.ok) {
                        showFeedbackModal("success", "Dersler Başarıyla Onaya Gönderildi", json.Message, null, null, () => { setTimeout(window.location.reload(), 2500) });
                    } else {
                        showFeedbackModal("error", "Dersler Onaya Gönderilirken Hata", json.Message, null, null, () => { setTimeout(window.location.reload(), 2500) });

                    }
                };

                // === Event Listeners ===
                $('#available-courses-datatable tbody').on('click',
                    '.btn-add-course',
                    function() {
                        const row = $(this).closest('tr')[0];
                        const courseData = {
                            id: row.dataset.id,
                            code: row.dataset.code,
                            name: row.dataset.name,
                            credit: parseInt(row.dataset.credit, 10),
                            teacher: row.dataset.teacher
                        };
                        addCourseToSelection(courseData);
                    });

                selectedCoursesList.addEventListener('click',
                    e => {
                        const removeBtn = e.target.closest('.btn-remove-course');
                        if (removeBtn) {
                            removeCourseFromSelection(removeBtn.dataset.id);
                        }
                    });

                submitBtn.addEventListener('click', submitSelection);

                // Initial UI setup
                updateCreditCount();
                updateAvailableList();
            });
    </script>
}