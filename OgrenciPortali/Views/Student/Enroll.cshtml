@model Shared.DTO.EnrollPageDTO
@{
    ViewBag.Title = "Ders Kayıt";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .course-card {
        border-left: 5px solid;
        transition: all 0.2s ease-in-out;
    }

        .course-card:hover {
            transform: scale(1.02);
            box-shadow: 0 8px 25px rgba(0, 0, 0, .1);
        }

        .course-card.available {
            border-left-color: #6c757d;
        }

        .course-card.selected {
            border-left-color: #0d6efd;
        }

        .course-card.pending {
            border-left-color: #ffc107;
            opacity: 0.8;
        }

    .list-container {
        min-height: 400px;
        background-color: #f8f9fa;
        border-radius: 8px;
    }

        .list-container h5 {
            position: sticky;
            top: 0;
            background: #f8f9fa;
            z-index: 10;
            padding-bottom: 0.5rem;
        }
</style>

<div class="container-fluid mt-4">
    <div class="d-flex flex-wrap justify-content-between align-items-center mb-3 gap-3">
        <div>
            <h2 class="mb-0">@ViewBag.Title</h2>
            <h5 class="text-muted" id="activeSemester">
                <span class="placeholder col-6"></span>
            </h5>
        </div>
        <div class="d-flex align-items-center gap-3">
            <div class="text-end">
                <span class="text-muted">Maksimum Kredi</span>
                <h4 class="fw-bold mb-0" id="totalCredits">30</h4>
            </div>
            <div class="text-end">
                <span class="text-muted">Kalan Kredi</span>
                <h4 class="fw-bold mb-0" id="remainingCredits">30</h4>
            </div>
            <div class="text-end">
                <span class="text-muted">Seçilen Kredi</span>
                <h4 class="fw-bold mb-0" id="selectedCredits">0</h4>
            </div>
            <div class="text-end">
                <span class="text-muted">Onaydaki Kredi</span>
                <h4 class="fw-bold mb-0" id="pendingCredits">0</h4>
            </div>
        </div>
    </div>

    <div class="card shadow-sm mb-4">
        <div class="card-body d-flex flex-wrap justify-content-between align-items-center gap-3">

            <input type="text" class="form-control" style="max-width: 225px;" id="courseSearch" placeholder="Alınabilir derslerde ara...">
            <div>
                <button class="btn btn-outline-danger" id="resetBtn"><i class="bi bi-arrow-counterclockwise me-2"></i>Seçimleri Sıfırla</button>
                <button class="btn btn-outline-danger" id="resetPendingBtn"><i class="bi bi-trash3 me-2"></i>Onaydakileri Sıfırla</button>
                <button class="btn btn-success" id="submitBtn"><i class="bi bi-send-check me-2"></i>Danışman Onayına Gönder</button>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-4 mb-4">
            <div class="p-3 list-container">
                <h5 class="pb-2 mb-3 border-bottom"><i class="bi bi-card-list me-2"></i>Alınabilir Dersler</h5>
                <div id="available-courses" class="d-grid gap-3">
                    <div class="card placeholder-glow">
                        <div class="card-body placeholder" style="min-height: 120px;"></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-4 mb-4">
            <div class="p-3 list-container">
                <h5 class="pb-2 mb-3 border-bottom"><i class="bi bi-cart-plus me-2"></i>Seçilen Dersler</h5>
                <div id="selected-courses" class="d-grid gap-3"></div>
            </div>
        </div>
        <div class="col-lg-4">
            <div class="p-3 list-container">
                <h5 class="pb-2 mb-3 border-bottom"><i class="bi bi-hourglass-split me-2"></i>Onay Bekleyen Dersler</h5>
                <div id="pending-courses" class="d-grid gap-3"></div>
            </div>
        </div>
    </div>
    @Html.AntiForgeryToken()
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded',
            function () {
                const containers = {
                    available: document.getElementById('available-courses'),
                    selected: document.getElementById('selected-courses'),
                    pending: document.getElementById('pending-courses')
                };
                const counters = {
                    selected: document.getElementById('selectedCredits'),
                    pending: document.getElementById('pendingCredits')
                };
                let initialRemainingCredits = 0; 
                // ### YENİLİK: Maksimum kredi limitini de değişkene alıyoruz ###
                const maxCreditsEl = document.getElementById('totalCredits');
                const semesterEl = document.getElementById('activeSemester');
                const searchInput = document.getElementById('courseSearch');
                const submitBtn = document.getElementById('submitBtn');
                const resetBtn = document.getElementById('resetBtn');
                const resetPendingBtn = document.getElementById('resetPendingBtn');
                const remainingCreditsEl = document.getElementById('remainingCredits');


                // --- VERİ YÜKLEME VE ARAYÜZ ÇİZME ---
                async function loadInitialData() {
                    try {
                        const apiUrl = encodeURIComponent('api/student/enroll');
                        const response = await fetch(`/ApiProxy/Get?apiUrl=${apiUrl}`);
                        if (!response.ok) throw new Error('Ders bilgileri alınamadı.');
                        const data = await response.json();

                        semesterEl.textContent = data.ActiveSemesterName || 'Aktif Dönem Bulunamadı';
                        initialRemainingCredits = data.RemainingCredits  || 30;
                        renderAllCourses(data);
                        updateAllCounters();
                    } catch (error) {
                        containers.available.innerHTML = `<div class="alert alert-danger">${error.Message}</div>`;
                    }
                }

                function renderAllCourses(data) {
                    renderColumn(data.EnrollableList, containers.available, 'available');
                    renderColumn(data.PendingCourses, containers.pending, 'pending');
                }

                function renderColumn(courses, container, type) {
                    container.innerHTML = '';
                    if (!courses || courses.length === 0) {
                        const messages = { available: 'Alınabilecek ders bulunamadı.', selected: 'Henüz ders seçmediniz.', pending: 'Onay bekleyen dersiniz yok.' };
                        container.innerHTML = `<div class="alert alert-light text-center p-4">${messages[type]}</div>`;
                        return;
                    }
                    courses.forEach(course => container.appendChild(createCourseCard(course, type)));
                }

                function createCourseCard(course, type) {
                    const card = document.createElement('div');
                    card.className = `card course-card shadow-sm ${type}`;
                    card.dataset.id = course.OfferedCourseId;
                    card.dataset.credit = course.Credit;
                    card.dataset.search = `${course.CourseCode} ${course.CourseName} ${course.TeacherName}`.toLowerCase();

                    let buttonHtml = '';
                    if (type === 'available') {
                        buttonHtml = `<button class="btn btn-sm btn-outline-primary action-btn" data-action="select"><i class="bi bi-plus-circle"></i> Ekle</button>`;
                    } else if (type === 'selected') {
                        buttonHtml = `<button class="btn btn-sm btn-outline-warning action-btn" data-action="deselect"><i class="bi bi-dash-circle"></i> Çıkar</button>`;
                    }
                    let percent = (Number(course.CurrentUserCount) / Number(course.Quota)) * 100;
                    let fullPercent = "bg-success";
                    if (percent >= 50)
                        fullPercent = "bg-warning";
                    if (percent == 100)
                        fullPercent = "bg-danger";

                    card.innerHTML = `
                    <div class="card-body p-3">
                        <div class="d-flex justify-content-between">
                            <h6 class="card-title fw-bold mb-1"> ${course.CourseCode} | ${course.CourseName}</h6>
                            <div><span class="badge bg-primary rounded-pill">${course.Credit} Kredi</span></div>
                        </div>
                        <small class="text-muted d-block mb-2">${course.TeacherName}</small>
                        <small class="d-block"><i class="bi bi-calendar3 me-1"></i>${course.DayOfWeek}, ${course.StartTime} - ${course.EndTime}</small>
                        <small class="d-block"><i class="bi bi-door-open me-1"></i>${course.Classroom}</small>
                        <small class="d-block"><i class="bi bi-pie-chart me-1"></i><span class="badge-pill ${fullPercent} fw-bold px-2 text-black">${course.CurrentUserCount}/${course.Quota}</span></small>
                        ${buttonHtml ? `<div class="mt-2 text-end">${buttonHtml}</div>` : ''}
                    </div>
                `;
                    return card;
                }
                function updateRemainingCredits() {
                    // Sadece "Seçilen Dersler" sütunundaki (yani yeni eklenenlerin) kredisini hesapla.
                    const newlySelectedCredits = calculateCredits(containers.selected);

                    // API'den gelen başlangıç kredisinden yeni seçilenleri çıkar.
                    const remaining = initialRemainingCredits - newlySelectedCredits - calculateCredits(containers.pending);

                    // Sonucu ekrana yazdır.
                    remainingCreditsEl.textContent = remaining;

                    // Kalan kredi 0'ın altına düşerse (kredi aşımı) rengini kırmızı yap.
                    if (remaining < 0) {
                        remainingCreditsEl.classList.add('text-danger');
                    } else {
                        remainingCreditsEl.classList.remove('text-danger');
                    }
                }
                function updateAllCounters() {
                    counters.selected.textContent = calculateCredits(containers.selected);
                    counters.pending.textContent = calculateCredits(containers.pending);
                    updateRemainingCredits();
                    submitBtn.disabled = containers.selected.childElementCount === 0;
                }

                function calculateCredits(container) {
                    return Array.from(container.querySelectorAll('.course-card')).reduce((sum, card) => sum + parseInt(card.dataset.credit), 0);
                }

                // --- EYLEMLER ---
                async function selectCourse(card) {
                    const button = card.querySelector('.action-btn');
                    button.disabled = true;

                    // ### 1. YENİ KONTROL: DERS EKLEME ANINDA KREDİ LİMİTİ KONTROLÜ ###
                    const courseCredit = parseInt(card.dataset.credit);
                    const maxCredits = parseInt(maxCreditsEl.textContent);
                    const currentSelectedCredits = calculateCredits(containers.selected);
                    const currentPendingCredits = calculateCredits(containers.pending);

                    if ((currentSelectedCredits + currentPendingCredits + courseCredit) > maxCredits) {
                        showFeedbackModal('warning', 'Kredi Limiti Aşıldı', `Bu dersi eklerseniz maksimum kredi limitini (${maxCredits}) aşarsınız.`);
                        button.disabled = false; // Butonu tekrar aktif et
                        return; // Fonksiyonu sonlandır
                    }
                    // ### KONTROL SONU ###

                    try {
                        const id = card.dataset.id;
                        const apiUrl = encodeURIComponent(`api/student/check-conflict`);
                        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                        const response = await fetch(`/ApiProxy/Post?apiUrl=${apiUrl}`,
                            {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': token },
                                body: JSON.stringify({ offeredCourseId: id })
                            });
                        const result = await response.json();

                        if (result.hasConflict) {
                            throw new Error(result.Message);
                        }

                        if (containers.selected.querySelector('.alert')) containers.selected.innerHTML = '';
                        card.querySelector('[data-action="select"]').innerHTML = '<i class="bi bi-dash-circle"></i> Çıkar';
                        card.querySelector('[data-action="select"]').dataset.action = 'deselect';
                        containers.selected.appendChild(card);

                    } catch (error) {
                        showFeedbackModal('error', 'Çakışma Hatası', error.Message);
                    } finally {
                        button.disabled = false;
                        updateAllCounters();
                    }
                }

                function deselectCourse(card) {
                    if (containers.available.querySelector('.alert')) containers.available.innerHTML = '';
                    card.querySelector('[data-action="deselect"]').innerHTML = '<i class="bi bi-plus-circle"></i> Ekle';
                    card.querySelector('[data-action="deselect"]').dataset.action = 'select';
                    containers.available.appendChild(card);
                    updateAllCounters();
                }

                async function resetPendingSelections() {
                    resetPendingBtn.disabled = true;
                    resetPendingBtn.innerHTML = `<span class="spinner-border spinner-border-sm me-2"></span>Sıfırlanıyor...`;
                    try {
                        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                        const apiUrl = encodeURIComponent('api/student/reset-pending-enrollments');
                        const response = await fetch(`/ApiProxy/Post?apiUrl=${apiUrl}`,
                            {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': token },
                            });
                        const result = await response.json();
                        if (response.ok) showFeedbackModal('success', 'Başarılı', result.Message, null, null, () => location.reload());
                        else {
                            showFeedbackModal("error", "Sıfırlama Hatası", result.Message);
                        }
                    } catch (error) {
                        showFeedbackModal('error', 'Hata', error.message);
                    }
                    resetPendingBtn.disabled = false;
                    resetPendingBtn.innerHTML = `<i class="bi bi-trash3 me-2"></i>Onaydakileri Sıfırla`;
                }

                async function submitSelection() {
                    const selectedIds = Array.from(containers.selected.querySelectorAll('.course-card')).map(c => c.dataset.id);

                    if (selectedIds.length === 0) {
                        showFeedbackModal('warning', 'Ders Seçilmedi', 'Onaya göndermek için en az bir ders seçmelisiniz.');
                        return;
                    }

                    // ### 2. YENİ KONTROL: ONAYA GÖNDERME ANINDA KREDİ LİMİTİ KONTROLÜ ###
                    const maxCredits = parseInt(maxCreditsEl.textContent);
                    const totalCredits = calculateCredits(containers.selected) + calculateCredits(containers.pending);

                    if (totalCredits > maxCredits) {
                        showFeedbackModal('warning', 'Kredi Limiti Aşıldı', `Seçtiğiniz ve onayda bekleyen derslerin toplam kredisi (${totalCredits}), maksimum kredi limitini (${maxCredits}) aşıyor. Lütfen ders çıkarın.`);
                        return; // Gönderme işlemini durdur
                    }
                    // ### KONTROL SONU ###

                    submitBtn.disabled = true;
                    submitBtn.innerHTML = `<span class="spinner-border spinner-border-sm me-2"></span>Gönderiliyor...`;

                    try {
                        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                        const apiUrl = encodeURIComponent('api/student/enroll');
                        const response = await fetch(`/ApiProxy/Post?apiUrl=${apiUrl}`,
                            {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': token },
                                body: JSON.stringify(selectedIds)
                            });
                        const result = await response.json();
                        if (response.ok) showFeedbackModal('success', 'Başarılı', result.Message, null, null, () => location.reload());
                        else {
                            showFeedbackModal("error", "Kayıtlanma Hatası", result.Message);
                            submitBtn.disabled = false;
                            submitBtn.innerHTML = `<i class="bi bi-send-check me-2"></i>Danışman Onayına Gönder`;
                        }
                    } catch (error) {
                        showFeedbackModal('error', 'Hata', error.Message);
                        submitBtn.disabled = false;
                        submitBtn.innerHTML = `<i class="bi bi-send-check me-2"></i>Danışman Onayına Gönder`;
                    }
                }

                // --- EVENT LISTENERS ---
                document.addEventListener('click',
                    e => {
                        const button = e.target.closest('.action-btn');
                        if (!button) return;
                        const card = button.closest('.course-card');
                        if (button.dataset.action === 'select') selectCourse(card);
                        if (button.dataset.action === 'deselect') deselectCourse(card);
                    });

                searchInput.addEventListener('input',
                    () => {
                        const term = searchInput.value.toLowerCase();
                        containers.available.querySelectorAll('.course-card').forEach(card => {
                            card.style.display = card.dataset.search.includes(term) ? '' : 'none';
                        });
                    });

                submitBtn.addEventListener('click', submitSelection);
                resetBtn.addEventListener('click', () => location.reload());
                resetPendingBtn.addEventListener('click', resetPendingSelections);

                loadInitialData();
            });
    </script>
}