@model List<OgrenciPortali.ViewModels.SemesterListViewModel>
@{
    ViewBag.Title = "Dönem Yönetimi";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>@ViewBag.Title</h2>
        <p>
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addSemesterModal">
                <i class="bi bi-plus-square me-2"></i>Yeni Dönem Ekle
            </button>
        </p>
    </div>

    <div class="card shadow-sm">
        <div class="card-body">
            <table id="semestersTable" class="table table-striped table-bordered" style="width: 100%">
                <thead class="thead-dark">
                    <tr class="text-center">
                        <th>Dönem Adı</th>
                        <th>Başlangıç Tarihi</th>
                        <th>Bitiş Tarihi</th>
                        <th>Durum</th>
                        <th>İşlemler</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@Html.DisplayFor(modelItem => item.SemesterName)</td>
                            <td>@item.StartDate.ToShortDateString()</td>
                            <td>@item.EndDate.ToShortDateString()</td>
                            <td>
                                @if (item.IsActive)
                                {
                                    <span class="badge bg-success">Aktif</span>
                                }
                                else
                                {
                                    <span class="badge bg-danger">Pasif</span>
                                }
                            </td>
                            <td class="text-center">
                                @* DÜZENLEME: Edit butonu artık modalı tetikleyecek ve data-id taşıyacak *@
                                <a class="btn btn-outline-info btn-sm edit-button" href="#" data-id="@item.SemesterId">
                                    <i class="bi bi-pen" style="font-size: 1rem"></i>
                                </a>
                                <a class="btn btn-sm btn-outline-danger delete-button text-center" data-id="@item.SemesterId" data-name="@item.SemesterName">
                                    <i class="bi bi-trash" style="font-size: 1rem"></i>
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    @Html.AntiForgeryToken()
</div>

<div class="modal fade" id="addSemesterModal" tabindex="-1" aria-labelledby="addSemesterModalLabel" aria-hidden="true" style="z-index: 2000">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title text-white" id="addSemesterModalLabel">
                    <i class="bi bi-plus-square me-2"></i>Yeni Dönem Ekle
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addSemesterForm" class="needs-validation" novalidate>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="semesterName" class="form-label">
                                <i class="bi bi-tag me-1"></i>Dönem Adı
                            </label>
                            <input type="text" class="form-control" id="semesterName" name="SemesterName" required>
                            <div class="invalid-feedback" id="semesterNameError"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">
                                <i class="bi bi-calendar me-1"></i>Dönem Aktif Mi?
                            </label>
                            <div class="d-flex gap-2">
                                <button type="button" id="btnYes" class="btn btn-success flex-fill">Evet</button>
                                <button type="button" id="btnNo" class="btn btn-danger flex-fill">Hayır</button>
                            </div>
                            <input type="hidden" id="isActive" name="IsActive" value="true">
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="startDate" class="form-label">
                                <i class="bi bi-calendar me-1"></i>Başlangıç Tarihi
                            </label>
                            <input type="date" class="form-control" id="startDate" name="StartDate" required>
                            <div class="invalid-feedback" id="startDateError"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="endDate" class="form-label">
                                <i class="bi bi-calendar me-1"></i>Bitiş Tarihi
                            </label>
                            <input type="date" class="form-control" id="endDate" name="EndDate" required>
                            <div class="invalid-feedback" id="endDateError"></div>
                        </div>
                        <div class="col-12">
                            <div id="dateError" class="text-danger"></div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-primary" id="saveSemesterBtn">
                    <i class="bi bi-check-lg me-2"></i>Dönem Ekle
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="editSemesterModal" tabindex="-1" aria-labelledby="editSemesterModalLabel" aria-hidden="true" style="z-index: 2000">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title text-white" id="editSemesterModalLabel">
                    <i class="bi bi-pen me-2"></i>Dönemi Düzenle
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editSemesterForm" class="needs-validation" novalidate>
                    <input type="hidden" id="editSemesterId" name="SemesterId">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="editSemesterName" class="form-label">
                                <i class="bi bi-tag me-1"></i>Dönem Adı
                            </label>
                            <input type="text" class="form-control" id="editSemesterName" name="SemesterName" required>
                            <div class="invalid-feedback" id="editSemesterNameError"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">
                                <i class="bi bi-calendar me-1"></i>Dönem Aktif Mi?
                            </label>
                            <div class="d-flex gap-2">
                                <button type="button" id="editBtnYes" class="btn btn-success flex-fill">Evet</button>
                                <button type="button" id="editBtnNo" class="btn btn-danger flex-fill">Hayır</button>
                            </div>
                            <input type="hidden" id="editIsActive" name="IsActive" value="true">
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="editStartDate" class="form-label">
                                <i class="bi bi-calendar me-1"></i>Başlangıç Tarihi
                            </label>
                            <input type="date" class="form-control" id="editStartDate" name="StartDate" required>
                            <div class="invalid-feedback" id="editStartDateError"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="editEndDate" class="form-label">
                                <i class="bi bi-calendar me-1"></i>Bitiş Tarihi
                            </label>
                            <input type="date" class="form-control" id="editEndDate" name="EndDate" required>
                            <div class="invalid-feedback" id="editEndDateError"></div>
                        </div>
                        <div class="col-12">
                            <div id="editDateError" class="text-danger"></div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-info" id="updateSemesterBtn">
                    <i class="bi bi-check-lg me-2"></i>Değişiklikleri Kaydet
                </button>
            </div>
        </div>
    </div>
</div>


@section scripts {
    <script>
        $(document).ready(function () {
            var table = $('#semestersTable').DataTable({
                language: {
                    url: '/Content/datatables/i18n/tr.json'
                },
                responsive: true,
                columnDefs: [
                    { orderable: false, targets: 4 }
                ],
                order: [[0, 'asc']]
            });

            // Auto-open Add modal
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get('add') === 'true') {
                setTimeout(() => { new bootstrap.Modal(document.getElementById('addSemesterModal')).show(); }, 500);
            }

            // --- DELETE SEMESTER ---
            $('#semestersTable tbody').on('click', '.delete-button', function () {
                var semesterIdToDelete = $(this).data('id');
                var semesterNameToDelete = $(this).data('name');
                var token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                showFeedbackModal('confirm',
                    'Dönemi Silme Onayı',
                    `<p><b>${semesterNameToDelete}</b> adlı dönemi silmek istediğinize emin misiniz?</p><div class="alert alert-warning mb-0"><i class="bi bi-exclamation-triangle me-2"></i><strong>Uyarı:</strong> Bu işlem geri alınamaz!</div>`,
                    async function () {
                        try {
                            var apiUrl = encodeURIComponent(`api/semesters/delete/${semesterIdToDelete}`);
                            var response = await fetch(`/ApiProxy/Post?apiUrl=${apiUrl}`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'RequestVerificationToken': token
                                }
                            });
                            const result = await response.json();
                            if (response.ok) {
                                showFeedbackModal("success", "İşlem Başarılı", result.Message || "Dönem başarıyla silindi.", null, null, () => { location.reload(); });
                            } else {
                                showFeedbackModal('error', 'İşlem Başarısız', result.Message || 'Bir hata oluştu.');
                            }
                        } catch (ex) {
                            showFeedbackModal("error", "Beklenmeyen Hata", "Sunucuya bağlanırken bir hata oluştu. Lütfen tekrar deneyin.");
                        }
                    },
                    'Evet, Sil'
                );
            });

            // --- ADD SEMESTER (Mevcut Fonksiyon) ---
            initializeAddSemesterModal();

            // --- YENİ: EDIT SEMESTER ---
            initializeEditSemesterModal(); // Yeni fonksiyonu çağır

            // --- Mevcut Add Modal Fonksiyonu ---
            function initializeAddSemesterModal() {
                // ... Mevcut add modal fonksiyonunuzun tamamı burada ...
                // Hiçbir değişiklik yapmanıza gerek yok.
                const addSemesterModal = new bootstrap.Modal(document.getElementById('addSemesterModal'));
                const addSemesterForm = document.getElementById('addSemesterForm');
                const saveSemesterBtn = document.getElementById('saveSemesterBtn');
                const btnYes = document.getElementById('btnYes');
                const btnNo = document.getElementById('btnNo');
                const isActiveInput = document.getElementById('isActive');
                const startDateInput = document.getElementById('startDate');
                const endDateInput = document.getElementById('endDate');
                const dateError = document.getElementById('dateError');
                function updateActiveButtons() {
                    const isActive = isActiveInput.value === 'true';
                    if (isActive) {
                        btnYes.classList.remove('btn-outline-success');
                        btnYes.classList.add('btn-success');
                        btnNo.classList.remove('btn-danger');
                        btnNo.classList.add('btn-outline-danger');
                    } else {
                        btnNo.classList.remove('btn-outline-danger');
                        btnNo.classList.add('btn-danger');
                        btnYes.classList.remove('btn-success');
                        btnYes.classList.add('btn-outline-success');
                    }
                }
                btnYes.addEventListener('click', function () { isActiveInput.value = 'true'; updateActiveButtons(); });
                btnNo.addEventListener('click', function () { isActiveInput.value = 'false'; updateActiveButtons(); });
                function validateDates() {
                    const startDate = new Date(startDateInput.value);
                    const endDate = new Date(endDateInput.value);
                    if (!startDateInput.value || !endDateInput.value) { dateError.textContent = ''; return true; }
                    if (startDate >= endDate) { dateError.textContent = 'Bitiş tarihi, başlangıç tarihinden sonra olmalıdır.'; return false; }
                    else { dateError.textContent = ''; return true; }
                }
                startDateInput.addEventListener('change', validateDates);
                endDateInput.addEventListener('change', validateDates);
                function validateSemesterForm() {
                    let isValid = true;
                    const formData = new FormData(addSemesterForm);
                    document.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
                    const semesterName = formData.get('SemesterName').trim();
                    if (!semesterName) { showSemesterFieldError('semesterName', 'semesterNameError', 'Dönem adı gereklidir'); isValid = false; }
                    else if (semesterName.length > 100) { showSemesterFieldError('semesterName', 'semesterNameError', 'Dönem adı en fazla 100 karakter olabilir'); isValid = false; }
                    if (!formData.get('StartDate')) { showSemesterFieldError('startDate', 'startDateError', 'Başlangıç tarihi gereklidir'); isValid = false; }
                    if (!formData.get('EndDate')) { showSemesterFieldError('endDate', 'endDateError', 'Bitiş tarihi gereklidir'); isValid = false; }
                    if (!validateDates()) { isValid = false; }
                    saveSemesterBtn.disabled = !isValid;
                    return isValid;
                }
                function showSemesterFieldError(fieldId, errorId, message) {
                    document.getElementById(fieldId).classList.add('is-invalid');
                    document.getElementById(errorId).textContent = message;
                }
                [document.getElementById('semesterName'), startDateInput, endDateInput].forEach(input => {
                    input.addEventListener('input', validateSemesterForm);
                    input.addEventListener('change', validateSemesterForm);
                });
                validateSemesterForm();
                saveSemesterBtn.addEventListener('click', async function () {
                    if (!validateSemesterForm()) return;
                    const originalText = saveSemesterBtn.innerHTML;
                    saveSemesterBtn.disabled = true;
                    saveSemesterBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Kaydediliyor...';
                    try {
                        const formData = new FormData(addSemesterForm);
                        const semesterData = { SemesterName: formData.get('SemesterName').trim(), StartDate: formData.get('StartDate'), EndDate: formData.get('EndDate'), IsActive: formData.get('IsActive') === 'true' };
                        var token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                        var apiUrl = encodeURIComponent('api/semesters/add');
                        const response = await fetch(`/ApiProxy/Post?apiUrl=${apiUrl}`, { method: 'POST', headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': token }, body: JSON.stringify(semesterData) });
                        const result = await response.json();
                        if (response.ok) {
                            addSemesterModal.hide();
                            addSemesterForm.reset();
                            isActiveInput.value = 'true';
                            updateActiveButtons();
                            showFeedbackModal('success', 'İşlem Başarılı', result.Message || 'Dönem başarıyla eklendi.', null, null, function () { location.reload(); });
                        } else {
                            showFeedbackModal('error', 'İşlem Başarısız', result.Message || 'Bir hata oluştu.');
                        }
                    } catch (error) {
                        console.error('Dönem eklenirken hata:', error);
                        showFeedbackModal('error', 'Bağlantı Hatası', 'Sunucuya bağlanırken bir hata oluştu.');
                    } finally {
                        saveSemesterBtn.disabled = false;
                        saveSemesterBtn.innerHTML = originalText;
                    }
                });
            }

            // --- YENİ: Edit Modal Fonksiyonu ---
            function initializeEditSemesterModal() {
                const editModalElement = document.getElementById('editSemesterModal');
                const editSemesterModal = new bootstrap.Modal(editModalElement);
                const editSemesterForm = document.getElementById('editSemesterForm');
                const updateSemesterBtn = document.getElementById('updateSemesterBtn');

                const semesterIdInput = document.getElementById('editSemesterId');
                const semesterNameInput = document.getElementById('editSemesterName');
                const isActiveInput = document.getElementById('editIsActive');
                const startDateInput = document.getElementById('editStartDate');
                const endDateInput = document.getElementById('editEndDate');

                const btnYes = document.getElementById('editBtnYes');
                const btnNo = document.getElementById('editBtnNo');
                const dateError = document.getElementById('editDateError');

                // Edit butonu tıklandığında verileri çek ve modalı doldur
                $('#semestersTable tbody').on('click', '.edit-button', async function () {
                    const semesterId = $(this).data('id');

                    try {

                        const apiUrl = encodeURIComponent(`api/semesters/edit/${semesterId}`);
                        const response = await fetch(`/ApiProxy/Get?apiUrl=${apiUrl}`);

                        if (!response.ok) {
                            throw new Error('Dönem bilgileri alınamadı.');
                        }

                        const semester = await response.json();

                        semesterIdInput.value = semesterId;
                        semesterNameInput.value = semester.SemesterName;
                        isActiveInput.value = semester.IsActive.toString();
                        // Tarihleri YYYY-MM-DD formatına çevir
                        startDateInput.value = new Date(semester.StartDate).toISOString().split('T')[0];
                        endDateInput.value = new Date(semester.EndDate).toISOString().split('T')[0];

                        // Butonları ve validasyonu güncelle
                        updateActiveButtons();
                        validateEditForm();

                        // Modalı göster
                        editSemesterModal.show();

                    } catch (error) {
                        console.error("Dönem verisi çekilirken hata:", error);
                        showFeedbackModal('error', 'Veri Alınamadı', 'Dönem bilgileri sunucudan alınırken bir hata oluştu.');
                    }
                });

                function updateActiveButtons() {
                    const isActive = isActiveInput.value === 'true';
                    if (isActive) {
                        btnYes.classList.remove('btn-outline-success');
                        btnYes.classList.add('btn-success');
                        btnNo.classList.remove('btn-danger');
                        btnNo.classList.add('btn-outline-danger');
                    } else {
                        btnNo.classList.remove('btn-outline-danger');
                        btnNo.classList.add('btn-danger');
                        btnYes.classList.remove('btn-success');
                        btnYes.classList.add('btn-outline-success');
                    }
                }
                btnYes.addEventListener('click', function () { isActiveInput.value = 'true'; updateActiveButtons(); });
                btnNo.addEventListener('click', function () { isActiveInput.value = 'false'; updateActiveButtons(); });

                function validateDates() {
                    if (!startDateInput.value || !endDateInput.value) { dateError.textContent = ''; return true; }
                    if (new Date(startDateInput.value) >= new Date(endDateInput.value)) {
                        dateError.textContent = 'Bitiş tarihi, başlangıç tarihinden sonra olmalıdır.';
                        return false;
                    }
                    dateError.textContent = '';
                    return true;
                }

                function validateEditForm() {
                    let isValid = true;
                    document.querySelectorAll('#editSemesterForm .is-invalid').forEach(el => el.classList.remove('is-invalid'));

                    if (!semesterNameInput.value.trim()) {
                        showFieldError('editSemesterName', 'editSemesterNameError', 'Dönem adı gereklidir.');
                        isValid = false;
                    }
                    if (!startDateInput.value) {
                        showFieldError('editStartDate', 'editStartDateError', 'Başlangıç tarihi gereklidir.');
                        isValid = false;
                    }
                    if (!endDateInput.value) {
                        showFieldError('editEndDate', 'editEndDateError', 'Bitiş tarihi gereklidir.');
                        isValid = false;
                    }
                    if (!validateDates()) {
                        isValid = false;
                    }
                    updateSemesterBtn.disabled = !isValid;
                    return isValid;
                }

                function showFieldError(fieldId, errorId, message) {
                    document.getElementById(fieldId).classList.add('is-invalid');
                    document.getElementById(errorId).textContent = message;
                }

                [semesterNameInput, startDateInput, endDateInput].forEach(input => {
                    input.addEventListener('input', validateEditForm);
                });

                // Formu Kaydet
                updateSemesterBtn.addEventListener('click', async function () {
                    if (!validateEditForm()) return;

                    const originalText = this.innerHTML;
                    this.disabled = true;
                    this.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Kaydediliyor...';

                    const semesterData = {
                        SemesterId: semesterIdInput.value,
                        SemesterName: semesterNameInput.value.trim(),
                        StartDate: startDateInput.value,
                        EndDate: endDateInput.value,
                        IsActive: isActiveInput.value === 'true'
                    };

                    try {
                        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                        // NOT: Bu API endpoint'inin (api/semesters/update) backend'de oluşturulmuş olması gerekir.
                        const apiUrl = encodeURIComponent('api/semesters/edit');
                        const response = await fetch(`/ApiProxy/Post?apiUrl=${apiUrl}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': token },
                            body: JSON.stringify(semesterData)
                        });
                        const result = await response.json();

                        if (response.ok) {
                            editSemesterModal.hide();
                            showFeedbackModal('success', 'İşlem Başarılı', result.Message || 'Dönem başarıyla güncellendi.', null, null, () => { location.reload(); });
                        } else {
                            showFeedbackModal('error', 'İşlem Başarısız', result.Message || 'Güncelleme sırasında bir hata oluştu.');
                        }
                    } catch (error) {
                        console.error("Güncelleme hatası:", error);
                        showFeedbackModal('error', 'Bağlantı Hatası', 'Sunucuya bağlanırken bir hata oluştu.');
                    } finally {
                        this.disabled = false;
                        this.innerHTML = originalText;
                    }
                });

                editModalElement.addEventListener('hidden.bs.modal', function () {
                    editSemesterForm.reset();
                    document.querySelectorAll('#editSemesterForm .is-invalid').forEach(el => el.classList.remove('is-invalid'));
                    document.querySelectorAll('#editSemesterForm .invalid-feedback').forEach(el => el.textContent = '');
                    dateError.textContent = '';
                });
            }
        });
    </script>
}