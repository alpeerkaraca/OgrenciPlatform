@using Roles = Shared.Enums.Roles
@using Shared.DTO
@model IEnumerable<UserDTO>
@{
    ViewBag.Title = "Kullanıcı Listesi";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .user-card {
        transition: all 0.3s ease;
        border: none;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

        .user-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }

    .list-user-avatar {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.5rem;
        font-weight: bold;
        margin-bottom: 1rem;
    }

    .role-badge {
        position: absolute;
        top: 15px;
        right: 15px;
    }

    .stats-section {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-radius: 12px;
        padding: 2rem;
        margin-bottom: 2rem;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 2rem;
        margin-top: 1.5rem;
    }

    .stats-item {
        text-align: center;
    }

    .stats-number {
        font-size: 2.5rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }

    .stats-label {
        font-size: 0.95rem;
        opacity: 0.9;
    }

    .filter-section {
        margin-bottom: 2rem;
    }

    .filter-btn {
        background: transparent;
        border: 2px solid #dee2e6;
        color: #6c757d;
        padding: 0.5rem 1rem;
        border-radius: 25px;
        margin-right: 0.5rem;
        margin-bottom: 0.5rem;
        transition: all 0.3s ease;
    }

        .filter-btn.active {
            background: #667eea;
            border-color: #667eea;
            color: white;
        }

        .filter-btn:hover {
            transform: translateY(-1px);
        }

    .search-box {
        border-radius: 25px;
        border: 2px solid #dee2e6;
        padding: 0.75rem 1.5rem;
        font-size: 0.95rem;
        transition: all 0.3s ease;
    }

        .search-box:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }

    .list-user-info {
        padding: 1.25rem;
        height: 100%
    }

    .list-user-name {
        font-size: 1.1rem;
        font-weight: bold;
        color: #495057;
        margin-bottom: 0.5rem;
    }

    .user-email {
        color: #6c757d;
        font-size: 0.9rem;
        margin-bottom: 0.75rem;
    }

    .user-details {
        font-size: 0.85rem;
        color: #6c757d;
    }

    .user-actions {
        padding: 1rem 1.25rem;
        background-color: #f8f9fa;
        border-top: 1px solid #dee2e6;
    }

    .no-users {
        text-align: center;
        padding: 3rem;
        color: #6c757d;
    }

        .no-users i {
            font-size: 4rem;
            margin-bottom: 1rem;
            opacity: 0.5;
        }

    .password-bubble {
        position: absolute;
        bottom: calc(100% + 10px);
        left: 0;
        width: 100%;
        background-color: #343a40;
        color: #fff;
        padding: 15px;
        border-radius: 8px;
        z-index: 1056;
        box-shadow: 0 4px 8px rgba(0, 0, 0, .2)
    }

        .password-bubble::after {
            content: '';
            position: absolute;
            top: 100%;
            left: 30px;
            border-width: 8px;
            border-style: solid;
            border-color: #343a40 transparent transparent transparent
        }

        .password-bubble ul {
            list-style-type: none;
            padding-left: 0;
            margin-bottom: 0;
            font-size: .9em
        }

        .password-bubble li {
            margin-bottom: 2px;
            transition: color .3s
        }

    .invalid {
        color: #d9534f
    }

        .invalid::before {
            content: '✗ ';
            margin-right: 5px
        }

    .valid {
        color: #4bbf73
    }

        .valid::before {
            content: '✓ ';
            margin-right: 5px
        }
</style>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-end align-items-center mt-1">
                <div>
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addUserModal">
                        <i class="bi bi-plus-circle me-2"></i>Yeni Kullanıcı Ekle
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (Model != null && Model.Any())
    {
        <div class="stats-section">
            <h4 class="mb-0">Kullanıcı İstatistikleri</h4>
            <div class="stats-grid">
                <div class="stats-item">
                    <div class="stats-number">@Model.Count()</div>
                    <div class="stats-label">Toplam Kullanıcı</div>
                </div>
                <div class="stats-item">
                    <div class="stats-number">@Model.Count(u => u.Role == Roles.Admin)</div>
                    <div class="stats-label">Admin</div>
                </div>
                <div class="stats-item">
                    <div class="stats-number">@Model.Count(u => u.Role == Roles.Danışman)</div>
                    <div class="stats-label">Danışman</div>
                </div>
                <div class="stats-item">
                    <div class="stats-number">@Model.Count(u => u.Role == Roles.Öğrenci)</div>
                    <div class="stats-label">Öğrenci</div>
                </div>
                <div class="stats-item">
                    <div class="stats-number">@Model.Count(u => u.IsFirstLogin)</div>
                    <div class="stats-label">İlk Giriş Bekleyen</div>
                </div>
            </div>
        </div>

        <div class="row filter-section">
            <div class="col-lg-8">
                <div class="mb-3">
                    <button class="filter-btn active" data-filter="all">
                        <i class="bi bi-people me-1"></i>Tümü
                    </button>
                    <button class="filter-btn" data-filter="admin">
                        <i class="bi bi-shield-check me-1"></i>Admin
                    </button>
                    <button class="filter-btn" data-filter="advisor">
                        <i class="bi bi-person-badge me-1"></i>Danışman
                    </button>
                    <button class="filter-btn" data-filter="student">
                        <i class="bi bi-mortarboard me-1"></i>Öğrenci
                    </button>
                    <button class="filter-btn" data-filter="first-login">
                        <i class="bi bi-exclamation-triangle me-1"></i>İlk Giriş
                    </button>
                </div>
            </div>
            <div class="col-lg-4">
                <input type="text" class="form-control search-box" id="userSearch" placeholder="Kullanıcı ara...">
            </div>
        </div>

        <div class="row" id="usersContainer">
            @foreach (var user in Model.OrderBy(u => u.FullName))
            {
                var roleClass = user.Role == Roles.Admin ? "admin" :
                    user.Role == Roles.Danışman ? "advisor" : "student";
                var roleBadgeClass = user.Role == Roles.Admin ? "danger" :
                    user.Role == Roles.Danışman ? "warning" : "info";
                var filterClass = user.IsFirstLogin ? "first-login " + roleClass : roleClass;

                <div class="col-xl-4 col-lg-6 mb-4 user-item" data-filter="@filterClass" data-search="@user.FullName.ToLower() @user.Email.ToLower() @user.StudentNo">
                    <div class="card user-card h-100">
                        <div class="list-user-info position-relative">
                            <span class="badge bg-@roleBadgeClass role-badge">@user.Role.ToString()</span>

                            <div class="text-center">
                                <div class="list-user-avatar mx-auto">
                                    @user.FullName.Substring(0, Math.Min(2, user.FullName.Length)).ToUpper()
                                </div>
                            </div>

                            <div class="list-user-name text-center">@user.FullName</div>
                            <div class="user-email text-center">@user.Email</div>

                            <div class="user-details h-100">
                                @if (!string.IsNullOrEmpty(user.StudentNo))
                                {
                                    <div class="d-flex justify-content-between mb-2">
                                        <span><i class="bi bi-card-text me-2"></i>Öğrenci No:</span>
                                        <span>@user.StudentNo</span>
                                    </div>
                                }
                                @if (user.DepartmentName != null)
                                {
                                    <div class="d-flex justify-content-between mb-2">
                                        <span><i class="bi bi-building me-2"></i>Bölüm:</span>
                                        <span>@user.DepartmentName</span>
                                    </div>
                                }
                                <div class="d-flex justify-content-between mb-2">
                                    <span><i class="bi bi-calendar-event me-2"></i>Kayıt:</span>
                                    <span>@user.CreatedAt.ToString("dd.MM.yyyy")</span>
                                </div>
                                @if (user.IsFirstLogin)
                                {
                                    <div class="text-center justify-content-center">
                                        <span class="badge bg-warning text-dark">
                                            <i class="bi bi-exclamation-triangle me-1"></i>İlk Giriş Bekliyor
                                        </span>
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="user-actions">
                            <div class="btn-group w-100" role="group">
                                <button type="button" class="btn btn-outline-primary btn-sm edit-button" data-id="@user.UserId">
                                    <i class="bi bi-pencil"></i> Düzenle
                                </button>
                                <button type="button" class="btn btn-outline-danger btn-sm delete-button" data-id="@user.UserId" data-name="@user.FullName">
                                    <i class="bi bi-trash"></i> Sil
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-12">
                <div class="no-users">
                    <i class="bi bi-people"></i>
                    <h4>Henüz Kullanıcı Bulunmuyor</h4>
                    <p class="mb-4">Sisteme ilk kullanıcıyı eklemek için aşağıdaki butona tıklayın.</p>
                    <button type="button" class="btn btn-primary btn-lg text-white" data-bs-toggle="modal" data-bs-target="#addUserModal">
                        <i class="bi bi-plus-circle me-2"></i>İlk Kullanıcıyı Ekle
                    </button>
                </div>
            </div>
        </div>
    }
</div>

<div class="modal fade" id="addUserModal" tabindex="-1" aria-labelledby="addUserModalLabel" aria-hidden="true" style="z-index: 2500">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title text-white" id="addUserModalLabel"><i class="bi bi-person-add me-2"></i>Yeni Kullanıcı Ekle</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addUserForm" novalidate>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Ad</label><input type="text" name="Name" class="form-control" required>
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Soyad</label><input type="text" name="Surname" class="form-control" required>
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">E-Posta</label><input type="email" name="Email" class="form-control" required>
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Kullanıcı Rolü</label><select name="Role" class="form-select" required></select>
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6 mb-3 position-relative" id="password-wrapper">
                            <label class="form-label">Parola</label><input type="password" name="Password" class="form-control" required>
                            <div class="invalid-feedback"></div>
                            <div class="password-bubble d-none">
                                <ul id="add-password-rules">
                                    <li id="add-length" class="invalid">En az 8 karakter</li>
                                    <li id="add-capital" class="invalid">En az 1 büyük harf</li>
                                    <li id="add-number" class="invalid">En az 1 rakam</li>
                                    <li id="add-symbol" class="invalid">En az 1 sembol</li>
                                </ul>
                            </div>
                        </div>
                        <div class="col-md-6 mb-3 conditional" id="add-department-container">
                            <label class="form-label">Bölüm</label><select name="DepartmentId" class="form-select"></select>
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6 mb-3 conditional" id="add-advisor-container">
                            <label class="form-label">Danışman</label><select name="AdvisorId" class="form-select"></select>
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6 mb-3 conditional" id="add-student-no-container">
                            <label class="form-label">Öğrenci Numarası</label><input type="text" name="StudentNo" class="form-control">
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6 mb-3 conditional" id="add-student-year-container">
                            <label class="form-label">Öğrenci Sınıfı</label><input type="number" name="StudentYear" class="form-control" min="1" max="5">
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-primary" id="saveUserBtn"><i class="bi bi-check-lg me-2"></i>Kullanıcı Ekle</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true" style="z-index: 2500">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title" id="editUserModalLabel"><i class="bi bi-pencil-square me-2"></i>Kullanıcıyı Düzenle</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editUserForm" novalidate>
                    <input type="hidden" name="UserId">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Ad</label><input type="text" name="Name" class="form-control" required>
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Soyad</label><input type="text" name="Surname" class="form-control" required>
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">E-Posta</label><input type="email" name="Email" class="form-control" required>
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Kullanıcı Rolü</label><select name="Role" class="form-select" required></select>
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6 mb-3 conditional" id="edit-department-container">
                            <label class="form-label">Bölüm</label><select name="DepartmentId" class="form-select"></select>
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6 mb-3 conditional" id="edit-advisor-container">
                            <label class="form-label">Danışman</label><select name="AdvisorId" class="form-select"></select>
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6 mb-3 conditional" id="edit-student-no-container">
                            <label class="form-label">Öğrenci Numarası</label><input type="text" name="StudentNo" class="form-control">
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6 mb-3 conditional" id="edit-student-year-container">
                            <label class="form-label">Öğrenci Sınıfı</label><input type="number" name="StudentYear" class="form-control" min="1" max="5">
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-info" id="updateUserBtn"><i class="bi bi-check-lg me-2"></i>Değişiklikleri Kaydet</button>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true" style="z-index: 2050">
    @Html.AntiForgeryToken()
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteConfirmModalLabel">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>Kullanıcı Silme Onayı
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Bu kullanıcıyı silmek istediğinize emin misiniz?</p>
                <div class="alert alert-warning mb-0">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    <strong>Uyarı:</strong> Bu işlem geri alınamaz!
                    <p class="mb-0 mt-2">
                        <strong>Kullanıcı:</strong> <span class="fw-bold" id="userNameToDelete"></span>
                    </p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">
                    <i class="bi bi-trash me-2"></i>Evet, Sil
                </button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script>
    document.addEventListener('DOMContentLoaded', function () {
        // Initialize existing page functions
        initializeFiltering();
        initializeSearch();

        // Initialize modal functionalities
        initializeAddUserModal();
        initializeEditUserModal();
        initializeDeleteFunctionality();
    });

    // --- CENTRAL FORM MANAGEMENT ---
    function initializeUserForm(options) {
        const { form, modal, isEditMode } = options;
        const saveBtn = form.querySelector('.btn-primary, .btn-info'); // Use class selector for flexibility

        const fields = {
            name: form.querySelector('[name="Name"]'),
            surname: form.querySelector('[name="Surname"]'),
            email: form.querySelector('[name="Email"]'),
            role: form.querySelector('[name="Role"]'),
            password: form.querySelector('[name="Password"]'),
            passwordBubble: form.querySelector('.password-bubble'),
            passwordRules: {
                length: form.querySelector('li[id$="length"]'),
                capital: form.querySelector('li[id$="capital"]'),
                number: form.querySelector('li[id$="number"]'),
                symbol: form.querySelector('li[id$="symbol"]'),
            },
            department: form.querySelector('[name="DepartmentId"]'),
            advisor: form.querySelector('[name="AdvisorId"]'),
            studentNo: form.querySelector('[name="StudentNo"]'),
            studentYear: form.querySelector('[name="StudentYear"]'),
            departmentContainer: form.querySelector('[id$="department-container"]'),
            advisorContainer: form.querySelector('[id$="advisor-container"]'),
            studentNoContainer: form.querySelector('[id$="student-no-container"]'),
            studentYearContainer: form.querySelector('[id$="student-year-container"]')
        };

        function handleRoleChange() {
            const role = fields.role.value;
            form.querySelectorAll('.conditional').forEach(el => el.style.display = 'none');
            [fields.department, fields.advisor, fields.studentNo].forEach(el => { if (el) el.required = false; });

            if (role === '2') { // Advisor
                fields.departmentContainer.style.display = 'block';
                fields.department.required = true;
            } else if (role === '3') { // Student
                fields.departmentContainer.style.display = 'block';
                fields.department.required = true;
                fields.advisorContainer.style.display = 'block';
                fields.advisor.required = true;
                fields.studentNoContainer.style.display = 'block';
                fields.studentNo.required = true;
                fields.studentYearContainer.style.display = 'block';
            }
        }

        function validatePassword() {
            if (!fields.password) return true; // No password field
            const pass = fields.password.value;
            let isValid = true;

            const rules = [
                { el: fields.passwordRules.length, regex: /.{8,}/ },
                { el: fields.passwordRules.capital, regex: /[A-Z]/ },
                { el: fields.passwordRules.number, regex: /[0-9]/ },
                { el: fields.passwordRules.symbol, regex: /[^A-Za-z0-9]/ }
            ];

            rules.forEach(rule => {
                if (rule.el) {
                    if (rule.regex.test(pass)) {
                        rule.el.classList.add('valid');
                        rule.el.classList.remove('invalid');
                    } else {
                        rule.el.classList.add('invalid');
                        rule.el.classList.remove('valid');
                        isValid = false;
                    }
                }
            });
            return isValid;
        }

        function validateForm() {
            let isValid = true;
            form.querySelectorAll('[required]').forEach(input => {
                input.classList.remove('is-invalid');
                if (!input.value.trim()) {
                    showError(input, 'Bu alanın doldurulması zorunludur.');
                    isValid = false;
                }
            });

            if (fields.email.value && !/^\S+@@\S+\.\S+$/.test(fields.email.value)) {
                showError(fields.email, 'Geçerli bir e-posta adresi giriniz..');
                isValid = false;
            }

            if (!isEditMode || (fields.password && fields.password.value)) {
                if (!validatePassword()) {
                    isValid = false;
                }
            }

            if (saveBtn) {
                saveBtn.disabled = !isValid;
            }
            return isValid;
        }

        function showError(inputEl, message) {
            inputEl.classList.add('is-invalid');
            const errorEl = inputEl.nextElementSibling;
            if (errorEl && errorEl.classList.contains('invalid-feedback')) {
                errorEl.textContent = message;
            }
        }

        fields.role.addEventListener('change', () => {
            handleRoleChange();
            validateForm();
        });

        if (fields.password) {
            fields.password.addEventListener('focus', () => fields.passwordBubble?.classList.remove('d-none'));
            fields.password.addEventListener('blur', () => fields.passwordBubble?.classList.add('d-none'));
            fields.password.addEventListener('input', () => {
                validatePassword();
                validateForm();
            });
        }
        form.querySelectorAll('input, select').forEach(input => input.addEventListener('input', validateForm));

        modal.addEventListener('hidden.bs.modal', () => {
            form.reset();
            form.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
            if(fields.passwordRules.length) {
                Object.values(fields.passwordRules).forEach(el => el?.classList.replace('valid', 'invalid'));
            }
            handleRoleChange();
        });

        handleRoleChange();
        return validateForm;
    }

    // --- GENERAL DATA FETCHING ---
    let formDataCache = null;
    async function fetchFormData() {
        if (formDataCache) return formDataCache;
        try {
            // NOTE: Ensure this API endpoint exists and returns all necessary lists
            const apiUrl = encodeURIComponent('api/user/register');
            const response = await fetch(`/ApiProxy/Get?apiUrl=${apiUrl}`);
            if (!response.ok) throw new Error('Form verisi alınamadı.');
            formDataCache = await response.json();
            return formDataCache;
        } catch (error) {
            showFeedbackModal('error', 'Veri Hatası', 'Gerekli listeler alınamadı.');
            return null;
        }
    }

    function populateDropdowns(form, data, selected = {}) {
        const populate = (name, list, valueKey, textKey) => {
            const select = form.querySelector(`[name="${name}"]`);
            if (!select) return;
            select.innerHTML = `<option value="">Seçiniz...</option>`;
            list.forEach(item => {
                const option = document.createElement('option');
                option.value = item[valueKey];
                option.textContent = item[textKey];
                if (selected[name] && item[valueKey].toString() === selected[name].toString()) {
                    option.selected = true;
                }
                select.appendChild(option);
            });
        };
        populate('Role', data.RolesList, 'Value', 'Text');
        populate('DepartmentId', data.DepartmentsList, 'Value', 'Text');
        populate('AdvisorId', data.AdvisorsList, 'Value', 'Text');
    }

    // --- ADD MODAL ---
    function initializeAddUserModal() {
        const modalEl = document.getElementById('addUserModal');
        const modal = new bootstrap.Modal(modalEl);
        const form = document.getElementById('addUserForm');
        const saveBtn = document.getElementById('saveUserBtn');

        const validate = initializeUserForm({ form: form, modal: modalEl, isEditMode: false });

        modalEl.addEventListener('show.bs.modal', async () => {
            const data = await fetchFormData();
            if (data) {
                populateDropdowns(form, data);
                validate();
            }
        });

        saveBtn.addEventListener('click', async function() {
            if (!validate()) return;
            const originalText = this.innerHTML;
            this.disabled = true;
            this.innerHTML = `<span class="spinner-border spinner-border-sm me-2"></span>Ekleniyor...`;

            const formData = new FormData(form);
            const data = Object.fromEntries(formData.entries());

            try {
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                const apiUrl = encodeURIComponent('api/user/register');
                const response = await fetch(`/ApiProxy/Post?apiUrl=${apiUrl}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': token },
                    body: JSON.stringify(data)
                });
                const result = await response.json();
                if (response.ok) {
                    modal.hide();
                    showFeedbackModal('success', 'Başarılı', result.Message || 'Kullanıcı başarıyla eklendi.', null, null, () => location.reload());
                } else {
                    showFeedbackModal('error', 'Hata', result.Message || 'Kullanıcı eklenirken hata oluştu.');
                }
            } catch (err) {
                showFeedbackModal('error', 'Bağlantı Hatası', 'Sunucuya bağlanılamadı.');
            } finally {
                this.disabled = false;
                this.innerHTML = `<i class="bi bi-check-lg me-2"></i>Kullanıcı Ekle`;
            }
        });
    }

    // --- EDIT MODAL ---
    function initializeEditUserModal() {
        const modalEl = document.getElementById('editUserModal');
        const modal = new bootstrap.Modal(modalEl);
        const form = document.getElementById('editUserForm');
        const updateBtn = document.getElementById('updateUserBtn');

        const validate = initializeUserForm({ form: form, modal: modalEl, isEditMode: true });

        document.getElementById('usersContainer').addEventListener('click', async function(e) {
            if (e.target.closest('.edit-button')) {
                const userId = e.target.closest('.edit-button').dataset.id;
                try {
                    const [formData, userData] = await Promise.all([
                        fetchFormData(),
                        fetchUserData(userId)
                    ]);
                    if (!formData || !userData) return;

                    const selected = {
                        Role: userData.Role,
                        DepartmentId: userData.DepartmentId,
                        AdvisorId: userData.AdvisorId
                    };
                    populateDropdowns(form, formData, selected);

                    form.elements.UserId.value = userData.UserId;
                    form.elements.Name.value = userData.Name;
                    form.elements.Surname.value = userData.Surname;
                    form.elements.Email.value = userData.Email;
                    form.elements.StudentNo.value = userData.StudentNo || '';
                    form.elements.StudentYear.value = userData.StudentYear || '';

                    const roleChangeEvent = new Event('change');
                    form.elements.Role.dispatchEvent(roleChangeEvent);

                    validate();
                    modal.show();
                } catch (error) {
                    showFeedbackModal('error', 'Veri Hatası', 'Kullanıcı bilgisi alınamadı.');
                    console.error(error);
                }
            }
        });

        async function fetchUserData(id) {
            const apiUrl = encodeURIComponent(`api/user/edit/${id}`);
            const response = await fetch(`/ApiProxy/Get?apiUrl=${apiUrl}`);
            if (!response.ok) throw new Error('Kullanıcı verisi alınamadı.');
            return await response.json();
        }

        updateBtn.addEventListener('click', async function() {
            if (!validate()) return;
            const originalText = this.innerHTML;
            this.disabled = true;
            this.innerHTML = `<span class="spinner-border spinner-border-sm me-2"></span>Güncelleniyor...`;

            const formData = new FormData(form);
            const data = Object.fromEntries(formData.entries());
            if (!data.Password) {
                delete data.Password;
            }

            try {
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                const apiUrl = encodeURIComponent('api/user/edit');
                const response = await fetch(`/ApiProxy/Post?apiUrl=${apiUrl}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': token },
                    body: JSON.stringify(data)
                });
                const result = await response.json();
                if (response.ok) {
                    modal.hide();
                    showFeedbackModal('success', 'Başarılı', result.Message || 'Kullanıcı başarıyla güncellendi.', null, null, () => setTimeout( () => window.location.reload(), 1500));
                } else {
                    showFeedbackModal('error', 'Hata', result.Message || 'Bir hata oluştu.');
                }
            } catch (err) {
                showFeedbackModal('error', 'Bağlantı hatası', 'Sunucuya bağlanırken bir hata oluştu.');
            } finally {
                this.disabled = false;
                this.innerHTML = `<i class="bi bi-check-lg me-2"></i>Değişiklikleri Kaydet`;
            }
        });
    }

    // --- DELETE MODAL ---
        function initializeDeleteFunctionality() {
            const deleteModalEl = document.getElementById('deleteConfirmModal');
            // Eğer sayfada silme modalı yoksa (örneğin hiç kullanıcı yoksa), hata almamak için kontrol ekliyoruz.
            if (!deleteModalEl) return;

            const deleteModal = new bootstrap.Modal(deleteModalEl);
            const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
            const userNameSpan = document.getElementById('userNameToDelete');
            let userIdToDelete = null;

            // Silme butonlarına tıklandığında modalı aç ve silinecek kullanıcıyı ayarla
            document.getElementById('usersContainer').addEventListener('click', function (e) {
                if (e.target.closest('.delete-button')) {
                    const button = e.target.closest('.delete-button');
                    userIdToDelete = button.dataset.id;
                    const userName = button.dataset.name;

                    // Modalın içini doldur
                    if (userNameSpan) userNameSpan.textContent = userName;

                    // Modalı göster
                    deleteModal.show();
                }
            });

            // Modal'daki "Sil" butonuna tıklandığında asıl silme işlemini yap
            confirmDeleteBtn.addEventListener('click', async function () {
                if (!userIdToDelete) return;

                // Silme işlemi sırasında butonu pasif yap ve spinner ekle
                const originalText = this.innerHTML;
                this.disabled = true;
                this.innerHTML = `<span class="spinner-border spinner-border-sm me-2"></span>Siliniyor...`;

                try {
                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                    const apiUrl = encodeURIComponent(`api/user/delete/${userIdToDelete}`);
                    const response = await fetch(`/ApiProxy/Post?apiUrl=${apiUrl}`, {
                        method: 'POST',
                        headers: { 'RequestVerificationToken': token }
                    });

                    const result = await response.json();

                    // Silme onay modalını kapat
                    deleteModal.hide();

                    // Sonuç modalını göster
                    if (response.ok) {
                        showFeedbackModal("success", "Başarılı", result.Message || "Kullanıcı başarıyla silindi.", null, null, () => location.reload());
                    } else {
                        showFeedbackModal('error', 'Hata', result.Message || 'Kullanıcı silinirken bir hata oluştu.');
                    }
                } catch (ex) {
                    // Silme onay modalını kapat
                    deleteModal.hide();
                    // Hata modalını göster
                    showFeedbackModal("error", "Bağlantı Hatası", "Sunucuya bağlanırken bir hata oluştu.");
                } finally {
                    // Butonu eski haline getir
                    this.disabled = false;
                    this.innerHTML = originalText;
                    userIdToDelete = null; // Bir sonraki işlem için ID'yi temizle
                }
            });
        }

    // --- EXISTING FILTER AND SEARCH FUNCTIONS ---
    function initializeFiltering() {
        const filterButtons = document.querySelectorAll('.filter-btn');
        const userItems = document.querySelectorAll('.user-item');
        filterButtons.forEach(button => {
            button.addEventListener('click', function () {
                const filter = this.dataset.filter;
                filterButtons.forEach(btn => btn.classList.remove('active'));
                this.classList.add('active');
                userItems.forEach(item => {
                    const filterData = item.dataset.filter;
                    item.style.display = (filter === 'all' || filterData.includes(filter)) ? 'block' : 'none';
                });
            });
        });
    }

    function initializeSearch() {
        const searchInput = document.getElementById('userSearch');
        const userItems = document.querySelectorAll('.user-item');
        searchInput.addEventListener('input', function () {
            const searchTerm = this.value.toLowerCase();
            userItems.forEach(item => {
                const searchData = item.dataset.search;
                item.style.display = searchData.includes(searchTerm) ? 'block' : 'none';
            });
        });
    }
    </script>
}

