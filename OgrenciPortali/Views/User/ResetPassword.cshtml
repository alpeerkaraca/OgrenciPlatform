@{
    ViewBag.Title = "Yeni Şifre Belirle";
    Layout = null;
}
@model OgrenciPortali.ViewModels.ResetPasswordViewModel

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>@ViewBag.Title - Öğrenci Portal</title>

    <link href="~/Content/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.13.1/font/bootstrap-icons.min.css">

    <style>
        /* Önceki stiller aynı kalıyor... */
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .login-container {
            backdrop-filter: blur(10px);
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            max-width: 400px;
            width: 100%;
        }

        .login-header {
            background: linear-gradient(135deg, #17a2b8 0%, #117a8b 100%);
            padding: 2rem;
            text-align: center;
            color: white;
        }

            .login-header h1 {
                margin: 0;
                font-size: 1.8rem;
                font-weight: 600;
            }

        .login-body {
            padding: 2.5rem 2rem;
        }

        .form-control {
            border: 2px solid #e9ecef;
            border-radius: 12px;
            padding: 1rem;
            font-size: 1rem;
            transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
        }

            .form-control.is-invalid {
                border-color: #dc3545;
            }

        .btn-reset {
            background: linear-gradient(135deg, #17a2b8 0%, #117a8b 100%);
            border: none;
            border-radius: 12px;
            padding: 1rem;
            font-size: 1.1rem;
            font-weight: 600;
            width: 100%;
            color: white;
            transition: opacity .3s;
        }

            .btn-reset:hover {
                transform: translateY(-2px);
                box-shadow: 0 10px 25px rgba(23, 162, 184, 0.3);
            }

            .btn-reset.disabled {
                opacity: 0.65;
                cursor: not-allowed;
                transform: none;
                box-shadow: none;
            }

        .progress {
            height: 5px;
        }

        /* --- POPOVER (BUBBLE) İÇİN YENİ STİLLER --- */
        .popover {
            border: none;
            border-radius: 12px;
            box-shadow: 0 8px 30px rgba(0,0,0,0.12);
            font-size: 0.875rem;
        }

        .popover-header {
            font-weight: 600;
            border-bottom: 1px solid #dee2e6;
            background-color: #f8f9fa;
        }

        .popover-body {
            padding: 1rem;
        }

        .password-rule {
            display: flex;
            align-items: center;
            margin-bottom: 0.5rem;
            transition: color 0.3s;
        }

            .password-rule:last-child {
                margin-bottom: 0;
            }

            .password-rule .bi {
                margin-right: 0.5rem;
                font-size: 1.1rem;
            }

            .password-rule.invalid {
                color: #6c757d; /* Gri - Henüz sağlanmadı */
            }

            .password-rule.valid {
                color: #198754; /* Yeşil - Sağlandı */
                font-weight: 500;
            }

                .password-rule.valid .bi::before {
                    content: "\f26a"; /* Bootstrap Icons Check Circle Fill */
                }
    </style>
</head>

<body>
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12">
                <div class="login-container mx-auto">
                    <div class="login-header">
                        <h1><i class="bi bi-shield-lock me-2"></i>Yeni Şifre</h1>
                    </div>

                    <div class="login-body">
                        <div id="error-container" class="alert alert-danger" style="display:none;"></div>

                        <form id="resetPasswordForm">
                            @Html.AntiForgeryToken()
                            @Html.HiddenFor(model => model.Token)

                            <div class="form-group mb-4">
                                <label for="NewPassword" class="form-label">Yeni Şifre</label>
                                @Html.PasswordFor(model => model.NewPassword, new
                                {
                                    @class = "form-control",
                                    id = "NewPassword",
                                    autocomplete = "new-password",
                                    data_bs_toggle = "popover",
                                    data_bs_placement = "right",
                                    data_bs_trigger = "manual",
                                    data_bs_title = "Parola Kuralları",
                                    data_bs_html = "true"
                                })
                            </div>

                            <div class="form-group mb-4">
                                <label for="ConfirmPassword" class="form-label">Yeni Şifre (Tekrar)</label>
                                @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control", id = "ConfirmPassword" })
                                <div id="confirmPasswordError" class="invalid-feedback d-block"></div>
                            </div>

                            <button type="button" id="resetBtn" class="btn btn-reset disabled">
                                <span class="btn-text"><i class="bi bi-check-circle me-2"></i>Şifreyi Değiştir</span>
                                <span class="spinner-border spinner-border-sm" style="display: none;" role="status" aria-hidden="true"></span>
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="successModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1">
    </div>

    <script src="~/Scripts/jquery-3.7.1.min.js"></script>
<script src="~/Scripts/bootstrap.bundle.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const form = document.getElementById('resetPasswordForm');
        const newPasswordField = document.getElementById('NewPassword');
        const confirmPasswordField = document.getElementById('ConfirmPassword');
        const resetBtn = document.getElementById('resetBtn');
        const errorContainer = document.getElementById('error-container');
        const successModal = new bootstrap.Modal(document.getElementById('successModal'));

        const passwordPopover = new bootstrap.Popover(newPasswordField, {});

        newPasswordField.addEventListener('focus', function () {
            passwordPopover.show();
        });

        newPasswordField.addEventListener('blur', function () {
            passwordPopover.hide();
        });

        newPasswordField.addEventListener('keyup', function () {
            validatePasswordRealtime();
        });

        resetBtn.addEventListener('click', function () {
            if (!validateForm()) {
                return;
            }

            setLoading(true);

            const formData = new FormData(form);
            const data = {
                Token: formData.get('Token'),
                NewPassword: formData.get('NewPassword'),
                ConfirmPassword: formData.get('ConfirmPassword')
            };

            fetch('@Url.Action("ResetPassword", "User")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': formData.get('__RequestVerificationToken')
                },
                body: JSON.stringify(data)
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(err => { throw new Error(err.message || 'Bir hata oluştu.') });
                }
                return response.json();
            })
            .then(result => {
                if (result.success) {
                    handleSuccess();
                } else {
                    throw new Error(result.message || 'İşlem başarısız oldu.');
                }
            })
            .catch(error => {
                handleError(error.message);
            })
            .finally(() => {
                setLoading(false);
            });
        });

        function validatePasswordRealtime() {
            const password = newPasswordField.value;
            let content = '';

            const isLengthValid = password.length >= 8;
            content += generateRuleHTML('En az 8 karakter olmalı', isLengthValid);

            const isCapitalValid = /[A-Z]/.test(password);
            content += generateRuleHTML('En az bir büyük harf (A-Z)', isCapitalValid);

            const isNumberValid = /[0-9]/.test(password);
            content += generateRuleHTML('En az bir rakam (0-9)', isNumberValid);

            const isSymbolValid = /[^A-Za-z0-9]/.test(password);
            content += generateRuleHTML('En az bir sembol (!, @@, #...)', isSymbolValid);

            newPasswordField.setAttribute('data-bs-content', content);
            passwordPopover.setContent({ '.popover-body': content });

            const allRulesValid = isLengthValid && isCapitalValid && isNumberValid && isSymbolValid;

            if (allRulesValid) {
                resetBtn.classList.remove('disabled');
            } else {
                resetBtn.classList.add('disabled');
            }
            return allRulesValid;
        }

        function generateRuleHTML(text, isValid) {
            const status = isValid ? 'valid' : 'invalid';
            const icon = isValid ? 'check-circle' : 'x-circle';
            return `<div class="password-rule ${status}"><i class="bi bi-${icon}"></i>${text}</div>`;
        }

        function validateForm() {
            let isValid = true;
            clearErrors();

            if (!validatePasswordRealtime()) {
                isValid = false;
            }

            if (newPasswordField.value !== confirmPasswordField.value) {
                showError('confirmPasswordError', 'Şifreler uyuşmuyor.');
                confirmPasswordField.classList.add('is-invalid');
                isValid = false;
            }

            return isValid;
        }

        function handleSuccess() {
            successModal.show();
            let progress = 0;
            const progressBar = document.getElementById('redirectProgress');
            const interval = setInterval(function () {
                progress += 5;
                progressBar.style.width = progress + '%';
                if (progress >= 100) {
                    clearInterval(interval);
                    window.location.href = '@Url.Action("Login", "User")';
                }
            }, 100);
        }

        function handleError(message) {
            errorContainer.textContent = message;
            errorContainer.style.display = 'block';
        }

        function setLoading(isLoading) {
            const btnText = resetBtn.querySelector('.btn-text');
            const spinner = resetBtn.querySelector('.spinner-border');
            if (isLoading) {
                resetBtn.disabled = true;
                btnText.style.display = 'none';
                spinner.style.display = 'inline-block';
            } else {
                resetBtn.disabled = false;
                btnText.style.display = 'inline-block';
                spinner.style.display = 'none';
            }
        }

        function showError(elementId, message) {
            const errorElement = document.getElementById(elementId);
            if(errorElement) {
                errorElement.textContent = message;
            }
        }

        function clearErrors() {
            errorContainer.style.display = 'none';
            confirmPasswordField.classList.remove('is-invalid');
            document.getElementById('confirmPasswordError').textContent = '';
        }
    });
</script>
</body>
</html>