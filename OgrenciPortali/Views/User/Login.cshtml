@{
    ViewBag.Title = "Giriş Yap";
    Layout = null;
}
@model OgrenciPortali.ViewModels.LoginUserViewModel

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>@ViewBag.Title - Öğrenci Portal</title>

    <!-- Bootstrap CSS -->
    <link href="~/Content/bootstrap.min.css" rel="stylesheet"/>
    <link href="~/Content/css/style.css" rel="stylesheet"/>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.13.1/font/bootstrap-icons.min.css">

    <style>
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .login-container {
            backdrop-filter: blur(10px);
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            max-width: 400px;
            width: 100%;
        }

        .login-header {
            background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
            padding: 2rem;
            text-align: center;
            color: white;
            position: relative;
        }

        .login-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.1'%3E%3Ccircle cx='30' cy='30' r='4'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
            opacity: 0.3;
        }

        .login-header h1 {
            margin: 0;
            font-size: 1.8rem;
            font-weight: 600;
            position: relative;
            z-index: 1;
        }

        .login-header .subtitle {
            margin: 0.5rem 0 0 0;
            opacity: 0.9;
            font-size: 0.95rem;
            position: relative;
            z-index: 1;
        }

        .login-icon {
            width: 60px;
            height: 60px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 1rem;
            position: relative;
            z-index: 1;
        }

        .login-body { padding: 2.5rem 2rem; }

        .form-floating { margin-bottom: 1.5rem; }

        .form-control {
            border: 2px solid #e9ecef;
            border-radius: 12px;
            padding: 1rem;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.9);
        }

        .form-control:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.15);
            background: white;
            transform: translateY(-2px);
        }

        .form-label {
            font-weight: 600;
            color: #495057;
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
        }

        .btn-login {
            background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
            border: none;
            border-radius: 12px;
            padding: 1rem;
            font-size: 1.1rem;
            font-weight: 600;
            width: 100%;
            color: white;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .btn-login:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(0, 123, 255, 0.3);
            background: linear-gradient(135deg, #0056b3 0%, #004085 100%);
        }

        .btn-login:active { transform: translateY(0); }

        .btn-login.loading { pointer-events: none; }

        .btn-login.loading::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 20px;
            height: 20px;
            margin: -10px 0 0 -10px;
            border: 2px solid transparent;
            border-top: 2px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0% { transform: rotate(0deg); }

            100% { transform: rotate(360deg); }
        }

        .alert {
            border-radius: 12px;
            border: none;
            margin-bottom: 1.5rem;
        }

        .alert-danger {
            background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
            color: white;
        }

        .form-check { margin: 1rem 0; }

        .form-check-input:checked {
            background-color: #007bff;
            border-color: #007bff;
        }

        .forgot-password {
            text-align: center;
            margin-top: 1.5rem;
        }

        .forgot-password a {
            color: #007bff;
            text-decoration: none;
            font-weight: 500;
        }

        .forgot-password a:hover { text-decoration: underline; }

        /* Animation for form validation */

        .shake { animation: shake 0.5s ease-in-out; }

        @@keyframes shake {
            0%, 100% { transform: translateX(0); }

            25% { transform: translateX(-5px); }

            75% { transform: translateX(5px); }
        }

        /* Responsive */

        @@media (max-width: 576px) {
            .login-container {
                margin: 1rem;
                border-radius: 15px;
            }

            .login-header, .login-body { padding: 1.5rem; }
        }
    </style>
</head>

<body>
<div class="container">
    <div class="row justify-content-center">
        <div class="col-12">
            <div class="login-container mx-auto">
                <div class="login-header">
                    <div class="login-icon">
                        <i class="bi bi-mortarboard" style="font-size: 1.8rem;"></i>
                    </div>
                    <h1>Öğrenci Portal</h1>
                    <p class="subtitle">Hesabınıza giriş yapın</p>
                </div>

                <div class="login-body">
                    @if (!ViewData.ModelState.IsValid)
                    {
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            @Html.ValidationSummary(true, "Lütfen aşağıdaki hataları düzeltin:", new { @class = "mb-0" })
                        </div>
                    }

                    @using (Html.BeginForm("Login", "User", FormMethod.Post, new { @class = "login-form", id = "loginForm" }))
                    {
                        <div class="form-group mb-4">
                            <label for="Email" class="form-label">
                                <i class="bi bi-envelope me-2"></i>E-posta Adresi
                            </label>
                            @Html.TextBoxFor(model => model.Email, new
                            {
                                @class = "form-control",
                                @placeholder = "ornek@email.com",
                                autocomplete = "email",
                                required = "required",
                                type = "email"
                            })
                        </div>

                        <div class="form-group mb-4">
                            <label for="Password" class="form-label">
                                <i class="bi bi-lock me-2"></i>Şifre
                            </label>
                            @Html.PasswordFor(model => model.Password, new
                            {
                                @class = "form-control",
                                @placeholder = "Şifrenizi girin",
                                autocomplete = "current-password",
                                required = "required"
                            })
                        </div>

                        <div class="form-check mb-4">
                            <input class="form-check-input" type="checkbox" value="" id="rememberMe">
                            <label class="form-check-label" for="rememberMe">
                                Beni hatırla
                            </label>
                        </div>

                        <button type="submit" class="btn btn-login" id="loginBtn">
                            <span class="btn-text">
                                <i class="bi bi-box-arrow-in-right me-2"></i>Giriş Yap
                            </span>
                        </button>

                        <div class="forgot-password">
                            <a href="#" onclick="showForgotPasswordModal()">
                                <i class="bi bi-question-circle me-1"></i>Şifremi unuttum
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Forgot Password Modal -->
<div class="modal fade" id="passwordResetModal" tabindex="-1" aria-labelledby="passwordResetModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="passwordResetModalLabel">
                    <i class="bi bi-key me-2"></i>Şifremi Unuttum
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">

                <div id="forgotPasswordFormView">
                    <p class="text-muted">Lütfen sistemde kayıtlı e-posta adresinizi girin. Size bir sıfırlama bağlantısı göndereceğiz.</p>
                    <form id="forgotPasswordForm">
                        @Html.AntiForgeryToken()
                        <div class="form-group">
                            <label for="resetEmail" class="form-label">E-posta Adresi</label>
                            <input type="email" class="form-control" id="resetEmail" placeholder="ornek@email.com" required>
                            <div class="invalid-feedback">
                                Lütfen geçerli bir e-posta adresi girin.
                            </div>
                        </div>
                    </form>
                </div>

                <div id="confirmationView" class="text-center py-4" style="display: none;">
                    <i class="bi bi-check-circle-fill text-success" style="font-size: 3rem;"></i>
                    <h5 class="mt-3">İstek Gönderildi</h5>
                    <p class="text-muted" id="server-response"></p>
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Kapat</button>
                <button type="button" class="btn btn-primary" id="sendResetLinkBtn">Sıfırlama Linki Gönder</button>
            </div>
        </div>
    </div>
</div>

<!-- Scripts -->
<script src="~/Scripts/jquery-3.7.1.min.js"></script>
<script src="~/Scripts/bootstrap.bundle.min.js"></script>

<script>
    function isValidEmail(email) {
        const emailRegex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
        return emailRegex.test(email);
    }

// Enhanced form handling
    $(document).ready(function() {
        const loginForm = $('#loginForm');
        const loginBtn = $('#loginBtn');
        const emailInput = $('#Email');
        const passwordInput = $('#Password');

        // Form validation
        function validateForm() {
            let isValid = true;

            // Email validation
            const email = emailInput.val().trim();
            if (!email || !isValidEmail(email)) {
                showFieldError(emailInput, 'Geçerli bir e-posta adresi girin');
                isValid = false;
            } else {
                clearFieldError(emailInput);
            }

            // Password validation
            const password = passwordInput.val();
            if (!password || password.length < 3) {
                showFieldError(passwordInput, 'Şifre en az 3 karakter olmalıdır');
                isValid = false;
            } else {
                clearFieldError(passwordInput);
            }

            return isValid;
        }


        function showFieldError(field, message) {
            field.addClass('is-invalid shake');
            field.attr('title', message);
            setTimeout(() => field.removeClass('shake'), 500);
        }

        function clearFieldError(field) {
            field.removeClass('is-invalid');
            field.removeAttr('title');
        }

        // Real-time validation
        emailInput.on('blur',
            function() {
                const email = $(this).val().trim();
                if (email && !isValidEmail(email)) {
                    showFieldError($(this), 'Geçerli bir e-posta adresi girin');
                } else {
                    clearFieldError($(this));
                }
            });

        passwordInput.on('input',
            function() {
                if ($(this).val().length >= 3) {
                    clearFieldError($(this));
                }
            });

        // Form submission
        loginForm.on('submit',
            function(e) {
                if (!validateForm()) {
                    e.preventDefault();
                    return false;
                }

                // Show loading state
                loginBtn.addClass('loading');
                loginBtn.find('.btn-text').html('<span class="spinner-border spinner-border-sm me-2"></span>Giriş yapılıyor...');
                loginBtn.prop('disabled', true);
            });

        // Auto-focus first empty field
        if (!emailInput.val()) {
            emailInput.focus();
        } else if (!passwordInput.val()) {
            passwordInput.focus();
        }
    });

    function showForgotPasswordModal() {
        $('#forgotPasswordFormView').show();
        $('#confirmationView').hide();
        $('#sendResetLinkBtn').show().prop('disabled', false).html('Sıfırlama Linki Gönder');
        $('#resetEmail').val('').removeClass('is-invalid');

        const modal = new bootstrap.Modal(document.getElementById('passwordResetModal'));
        modal.show();
    }

    $('#sendResetLinkBtn').on('click',
        function () {
            const serverResponse = $('#server-response');
            const form = $('#forgotPasswordForm');
            const emailInput = $('#resetEmail');
            const email = emailInput.val();
            const sendBtn = $(this);

            if (!email || !isValidEmail(email)) {
                emailInput.addClass('is-invalid');
                return;
            } else {
                emailInput.removeClass('is-invalid');
            }

            sendBtn.prop('disabled', true);
            sendBtn.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Gönderiliyor...');

            $.ajax({
                url: 'https://localhost:8000/api/user/forgot-password',
                type: 'POST',
                data: {
                    __RequestVerificationToken: form.find('input[name="__RequestVerificationToken"]').val(),
                    email: email
                },
                success: function (response) {
                    $('#forgotPasswordFormView').hide();
                    $('#confirmationView').show();
                    serverResponse.text(response.Message);
                    sendBtn.hide();
                },
                error: function() {
                    $('#forgotPasswordFormView').hide();
                    $('#confirmationView').show();
                    sendBtn.hide();
                }
            });
        });
</script>
</body>
</html>