@model OgrenciPortali.ViewModels.ChangePasswordViewModel
@{
    ViewBag.Title = "Þifre Deðiþtir";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .password-requirements {
        font-size: 0.9rem; 
    }
    
    .password-requirements .valid {
        color: #28a745;
    }
    
    .password-requirements .invalid {
        color: #dc3545;
    }
    
    .password-strength {
        height: 4px;
        border-radius: 2px;
        margin-top: 5px;
        transition: all 0.3s ease;
    }
    
    .strength-weak { background-color: #dc3545; }
    .strength-medium { background-color: #ffc107; }
    .strength-strong { background-color: #28a745; }
</style>

<div class="container">
    <div class=" row justify-content-center align-content-center align-items-center">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">
                        <i class="bi bi-shield-lock me-2"></i>Þifre Deðiþtir
                    </h4>
                </div>
                <div class="card-body d-flex align-content-center justify-content-center">
                    @if (TempData["SuccessMessage"] != null)
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            <i class="bi bi-check-circle-fill me-2"></i>@TempData["SuccessMessage"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    }

                    @using (Html.BeginForm("ChangePassword", "User", FormMethod.Post, new { @class = "needs-validation", novalidate = "novalidate" }))
                    {
                        @*@Html.AntiForgeryToken()*@

                        <div class="mb-3">
                            <label for="CurrentPassword" class="form-label">
                                <i class="bi bi-key me-1"></i>Mevcut Þifre
                            </label>
                            @Html.PasswordFor(m => m.CurrentPassword, new { @class = "form-control", placeholder = "Mevcut þifrenizi girin" })
                            @Html.ValidationMessageFor(m => m.CurrentPassword, "", new { @class = "text-danger" })
                        </div>

                        <div class="mb-3">
                            <label for="NewPassword" class="form-label">
                                <i class="bi bi-shield-lock me-1"></i>Yeni Þifre
                            </label>
                            @Html.PasswordFor(m => m.NewPassword, new { @class = "form-control", id = "newPassword", placeholder = "Yeni þifrenizi girin" })
                            <div class="password-strength" id="passwordStrength"></div>
                            @Html.ValidationMessageFor(m => m.NewPassword, "", new { @class = "text-danger" })
                            
                            <!-- Þifre Gereksinimleri -->
                            <div class="password-requirements mt-2">
                                <small class="text-muted">Þifre gereksinimleri:</small>
                                <ul class="list-unstyled small mt-1">
                                    <li id="length-req"><i class="bi bi-x-circle me-1"></i> En az 8 karakter</li>
                                    <li id="uppercase-req"><i class="bi bi-x-circle me-1"></i> En az 1 büyük harf</li>
                                    <li id="lowercase-req"><i class="bi bi-x-circle me-1"></i> En az 1 küçük harf</li>
                                    <li id="number-req"><i class="bi bi-x-circle me-1"></i> En az 1 rakam</li>
                                    <li id="special-req"><i class="bi bi-x-circle me-1"></i> En az 1 özel karakter (@@$!%*?&)</li>
                                </ul>
                            </div>
                        </div>

                        <div class="mb-4">
                            <label for="ConfirmPassword" class="form-label">
                                <i class="bi bi-shield-check me-1"></i>Yeni Þifreyi Onayla
                            </label>
                            @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control", placeholder = "Yeni þifrenizi tekrar girin" })
                            @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "text-danger" })
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary btn-lg">
                                <i class="bi bi-check-lg me-2"></i>Þifreyi Deðiþtir
                            </button>
                            <a href="@Url.Action("Index", "Home")" class="btn btn-secondary">
                                <i class="bi bi-arrow-left me-2"></i>Ana Sayfaya Dön
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const newPasswordInput = document.getElementById('newPassword');
            const confirmPasswordInput = document.getElementById('ConfirmPassword');
            const strengthBar = document.getElementById('passwordStrength');
            
            // Þifre gereksinim elemanlarý
            const lengthReq = document.getElementById('length-req');
            const uppercaseReq = document.getElementById('uppercase-req');
            const lowercaseReq = document.getElementById('lowercase-req');
            const numberReq = document.getElementById('number-req');
            const specialReq = document.getElementById('special-req');

            newPasswordInput.addEventListener('input', function() {
                const password = this.value;
                checkPasswordRequirements(password);
                updatePasswordStrength(password);
            });

            confirmPasswordInput.addEventListener('input', function() {
                const password = newPasswordInput.value;
                const confirmPassword = this.value;
                
                if (confirmPassword && password !== confirmPassword) {
                    this.classList.add('is-invalid');
                    this.classList.remove('is-valid');
                } else if (confirmPassword) {
                    this.classList.add('is-valid');
                    this.classList.remove('is-invalid');
                }
            });

            function checkPasswordRequirements(password) {
                // En az 8 karakter
                updateRequirement(lengthReq, password.length >= 8);
                
                // En az 1 büyük harf
                updateRequirement(uppercaseReq, /[A-Z]/.test(password));
                
                // En az 1 küçük harf
                updateRequirement(lowercaseReq, /[a-z]/.test(password));
                
                // En az 1 rakam
                updateRequirement(numberReq, /\d/.test(password));
                
                // En az 1 özel karakter
                updateRequirement(specialReq, /[@@$!%*?&]/.test(password));
            }

            function updateRequirement(element, isValid) {
                const icon = element.querySelector('i');
                if (isValid) {
                    element.classList.add('valid');
                    element.classList.remove('invalid');
                    icon.className = 'bi bi-check-circle me-1';
                } else {
                    element.classList.add('invalid');
                    element.classList.remove('valid');
                    icon.className = 'bi bi-x-circle me-1';
                }
            }

            function updatePasswordStrength(password) {
                let strength = 0;
                let width = 0;
                let className = '';

                if (password.length >= 8) strength++;
                if (/[A-Z]/.test(password)) strength++;
                if (/[a-z]/.test(password)) strength++;
                if (/\d/.test(password)) strength++;
                if (/[@@$!%*?&]/.test(password)) strength++;

                switch (strength) {
                    case 0:
                    case 1:
                    case 2:
                        width = 33;
                        className = 'strength-weak';
                        break;
                    case 3:
                    case 4:
                        width = 66;
                        className = 'strength-medium';
                        break;
                    case 5:
                        width = 100;
                        className = 'strength-strong';
                        break;
                }

                strengthBar.style.width = width + '%';
                strengthBar.className = 'password-strength ' + className;
            }
        });
    </script>
}