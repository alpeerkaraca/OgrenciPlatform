@using System.Security.Claims
@model OgrenciPortali.ViewModels.RegisterViewModel

@{
    ViewBag.Title = "Kullanıcı Kaydet";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.13.1/font/bootstrap-icons.min.css">
<style>
    #password-rules li {
        margin-bottom: 2px;
        -ms-transition: color 0.3s;
        -o-transition: color 0.3s;
        -webkit-transition: color 0.3s;
        transition: color 0.3s;
    }

    .invalid { color: #d9534f; }

    .invalid::before {
        content: '✗ ';
        margin-right: 5px;
    }

    .valid { color: #4bbf73; }

    .valid::before {
        content: '✓ ';
        margin-right: 5px;
    }

    .password-bubble {
        position: absolute;
        bottom: calc(100% + 10px);
        left: 0;
        width: 100%;
        background-color: #343a40;
        color: white;
        padding: 15px;
        border-radius: 8px;
        z-index: 10;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .password-bubble::after {
        content: '';
        position: absolute;
        top: 100%;
        left: 30px;
        border-width: 8px;
        border-style: solid;
        border-color: #343a40 transparent transparent transparent;
    }

    .password-bubble ul {
        list-style-type: none;
        padding-left: 0;
        margin-bottom: 0;
        font-size: 0.9em;
    }
</style>

<div class="container">
    <div class=" row justify-content-center align-content-center" style="min-height: 90vh;">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">
                        <i class="bi bi-person-add me-2"></i>Yeni Kullanıcı Ekle
                    </h4>
                </div>
                <div class="card-body d-flex align-content-center justify-content-center">
                    @using (Html.BeginForm("Register", "User", FormMethod.Post, new { @class = "needs-validation", id = "register-form" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(false, "", new { @class = "text-danger" })
                        <div class="row" id="form-area">

                            <div class="col-md-6 col-12 mb-3">
                                <label for="@Model.Name" class="form-label">
                                    <i class="bi bi-person me-1"></i>Ad
                                </label> @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", required = true } })
                            </div>
                            <div class=" col-md-6 col-12 mb-3">
                                <label for="@Model.Surname" class="form-label">
                                    <i class="bi bi-person me-1"></i>Soyad
                                </label>
                                @Html.EditorFor(model => model.Surname, new { htmlAttributes = new { @class = "form-control", required = true } })
                            </div>
                            <div class="col-md-6 col-12 mb-3">
                                <label for="@Model.Email" class="form-label">
                                    <i class="bi bi-envelope me-1"></i>E-Posta
                                </label> @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", required = true, type = "email" } })
                            </div>
                            <div class="col-md-6 col-12 mb-3">
                                <label for="@Model.Role" class="form-label">
                                    <i class="bi bi-door-open me-1"></i>
                                    Kullanıcı Rolü
                                </label>

                                @Html.DropDownListFor(m => m.Role, Model.RolesList, "Rol Seçiniz", new { @class = "form-select", id = "role" })
                            </div>

                            <div class=" col-md-6 col-12 mb-3" id="password-wrapper" style="position: relative;">
                                <label for="@Model.Password" class="form-label">
                                    <i class="bi bi-shield-lock me-1"></i> Parola
                                </label>
                                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", required = true, type = "password", id = "parola" } })

                                <div id="password-rules-container" class="password-bubble d-none">
                                    <ul id="password-rules">
                                        <li id="length" class="invalid">En az 8 karakter</li>
                                        <li id="capital" class="invalid">En az 1 büyük harf</li>
                                        <li id="number" class="invalid">En az 1 rakam</li>
                                        <li id="symbol" class="invalid">En az 1 sembol (!, $, #, vb.)</li>
                                    </ul>
                                </div>
                            </div>

                            <div class=" col-md-6 col-12 mb-3" id="department-container" style="display: none;">
                                <label for="@Model.DepartmentId" class="form-label">
                                    <i class="bi bi-building me-1"></i> Bölüm
                                </label>
                                @Html.DropDownListFor(m => m.DepartmentId, Model.DepartmentsList, "Bölüm Seçiniz", new { @class = "form-select", id = "department" })
                            </div>
                            <div class=" col-md-6 col-12 mb-3" id="advisor-container" style="display: none;">
                                <label for="@Model.AdvisorId" class="form-label">
                                    <i class="bi bi-person-vcard me-1"></i> Bölüm
                                </label>
                                @Html.DropDownListFor(m => m.AdvisorId, Model.AdvisorsList, "Danışman Seçiniz", new { @class = "form-select", id = "advisor" })
                            </div>

                            <div class=" col-md-6 col-12 mb-3" id="student-no-container" style="display: none;">
                                <label for="@Model.StudentNo" class="form-label">
                                    <i class="bi bi-8-square me-1"></i> Öğrenci Numarası
                                </label>
                                @Html.EditorFor(m => m.StudentNo, new { htmlAttributes = new { @class = "form-control", id = "student-no" } })
                            </div>
                            <div class=" col mb-3" id="student-year-container" style="display: none;">
                                <label for="@Model.StudentYear" class="form-label">
                                    <i class="bi bi-calendar me-1"></i> Öğrenci Sınıfı
                                </label>
                                @Html.EditorFor(m => m.StudentYear, new { htmlAttributes = new { @class = "form-control", id = "student-year", placeholder = "Yatay geçiş değilse boş bırakabilirsiniz.", min = 1, max = 5 } })
                            </div>

                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary">
                                    <i class="bi bi-check-lg me-2"></i>Kullanıcı Ekle
                                </button>
                                <a href="@Url.Action("Index", "Home")" class="btn btn-secondary">
                                    <i class="bi bi-arrow-left me-2"></i>Ana Sayfaya Dön
                                </a>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded',
            function() {
                var roleSelect = document.querySelector("#role");
                var passwordWrapper = document.querySelector('#password-wrapper');
                var studentNoContainer = document.querySelector('#student-no-container');
                var departmentContainer = document.querySelector('#department-container');
                var advisorContainer = document.querySelector('#advisor-container');
                var studentYearContainer = document.querySelector('#student-year-container');


                function handleRoleChange() {
                    var selectedValue = roleSelect.value;
                    var studentNoInput = studentNoContainer.querySelector('input');
                    var departmentSelect = departmentContainer.querySelector('select');
                    var advisorSelect = advisorContainer.querySelector('select');
                    var studentYearInput = studentYearContainer.querySelector('input');


                    studentNoContainer.style.display = 'none';
                    studentNoInput.required = false;
                    departmentContainer.style.display = 'none';
                    departmentSelect.required = false;
                    advisorContainer.style.display = 'none';
                    advisorSelect.required = false;
                    studentYearContainer.style.display = 'none';
                    studentYearInput.required = false;

                    if (selectedValue === '3') { // Öğrenci
                        departmentContainer.style.display = 'block';
                        departmentSelect.required = true;
                        studentNoContainer.style.display = 'block';
                        studentNoInput.required = true;
                        advisorContainer.style.display = 'block';
                        advisorSelect.required = true;
                        studentYearContainer.style.display = 'block';
                        studentYearInput.required = false;
                    } else if (selectedValue === '2') { // Danışman
                        departmentContainer.style.display = 'block';
                        departmentSelect.required = true;
                    }
                }

                roleSelect.addEventListener("change", handleRoleChange);
                handleRoleChange();

                var passwordInput = document.querySelector("#parola");
                var rulesContainer = document.querySelector("#password-rules-container");

                passwordInput.addEventListener('focus',
                    function() {
                        rulesContainer.classList.remove('d-none');
                    });

                passwordInput.addEventListener('blur',
                    function() {
                        rulesContainer.classList.add('d-none');
                    });

                passwordInput.addEventListener('keyup',
                    function() {
                        var submitButton = document.querySelector('button[type="submit"]');
                        var password = passwordInput.value;
                        var lengthRule = document.querySelector("#length");
                        var capitalRule = document.querySelector("#capital");
                        var numberRule = document.querySelector("#number");
                        var symbolRule = document.querySelector("#symbol");

                        if (password.length >= 8) {
                            lengthRule.classList.add('valid');
                            lengthRule.classList.remove('invalid');
                            submitButton.classList.remove('disabled');
                        } else {
                            lengthRule.classList.add('invalid');
                            lengthRule.classList.remove('valid');
                            submitButton.classList.add('disabled');

                        }
                        if (/[A-Z]/.test(password)) {
                            capitalRule.classList.add('valid');
                            capitalRule.classList.remove('invalid');
                            submitButton.classList.remove('disabled');
                        } else {
                            capitalRule.classList.add('invalid');
                            capitalRule.classList.remove('valid');
                            submitButton.classList.add('disabled');
                        }
                        if (/[0-9]/.test(password)) {
                            numberRule.classList.add('valid');
                            numberRule.classList.remove('invalid');
                            submitButton.classList.remove('disabled');
                        } else {
                            numberRule.classList.add('invalid');
                            numberRule.classList.remove('valid');
                            submitButton.classList.add('disabled');

                        }
                        if (/[^A-Za-z0-9]/.test(password)) {
                            symbolRule.classList.add('valid');
                            symbolRule.classList.remove('invalid');
                            submitButton.classList.remove('disabled');

                        } else {
                            symbolRule.classList.add('invalid');
                            symbolRule.classList.remove('valid');
                            submitButton.classList.add('disabled');

                        }
                    });
            });
        var $form = $('#register-form');

        function getFormData($form) {
            var unindexed_array = $form.serializeArray();
            var indexed_array = {};

            $.map(unindexed_array,
                function(n, i) {
                    indexed_array[n['name']] = n['value'];
                });

            return indexed_array;
        }

        $form.on('submit',
            async function(e) {
                e.preventDefault();
                const formData = getFormData($form);
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                var apiUrl = encodeURIComponent('api/user/register');
                var response = await fetch(`/ApiProxy/Post?apiUrl=${apiUrl}`,
                    {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify(formData)
            });
                if (response.ok) {
                    const res = await response.json();
                    showFeedbackModal("success", "Kullanıcı Eklendi", res.Message);
                    $form.reset();
                } else {
                    const errorRes = await response.json();
                    showFeedbackModal("error", "Kullanıcı Eklerken Hata", errorRes.Message || "Beklenmedik bir hata oluştu.");
                }
            });
    </script>
}